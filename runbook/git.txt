{'content': ['在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 git log 命令查看。',
             '针对我们前一章节的操作，使用 git log 命令列出历史提交记录如下：',
             '我们可以用 --oneline 选项来查看历史记录的简洁的版本。',
             '这告诉我们的是，此项目的开发历史。',
             '我们还可以用 --graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：',
             '现在我们可以更清楚明了地看到何时工作分叉、又何时归并。',
             '你也可以用 ',
             ' 参数来逆向显示所有日志。',
             '如果只想查找指定用户的提交日志可以使用命令：git log --author , 例如，比方说我们要找 Git 源码中 '
             'Linus 提交的部分：',
             '如果你要指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after。 ',
             '例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 --no-merges '
             '选项以隐藏合并提交）：',
             '更多 git log 命令可查看：',
             '\t\t\t',
             '\n\t\t\t\t\t\t\n\t\t\t'],
 'href': 'https://www.runoob.com/git/git-commit-history.html',
 'image': [],
 'title': 'Git 查看提交历史'}{'content': ['Git 并不像 SVN 那样有个中心服务器。 ',
             '目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git '
             '分享你的代码或者与其他开发人员合作。你就需要将数据放到一台其他开发人员能够连接的服务器上。',
             '本例使用了 Github 作为远程仓库，你可以先阅读我们的 ',
             '',
             '要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用,命令格式如下：',
             '本例以 Github 为例作为远程仓库，如果你没有 Github 可以在官网 ',
             '注册。',
             '',
             '由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：',
             '使用以下命令生成 SSH Key：',
             '后面的 ',
             ' 改为你在 Github 上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在 ~/ 下生成 '
             '.ssh 文件夹，进去，打开 ',
             '，复制里面的 ',
             '。',
             '回到 github 上，进入 Account => Settings（账户配置）。',
             '左边选择 ',
             '，然后点击 ',
             ' 按钮,title 设置标题，可以随便填，粘贴在你电脑上生成的 key。',
             '添加成功后界面如下所示',
             '',
             '为了验证是否成功，输入以下命令：',
             '以下命令说明我们已成功连上 Github。',
             '之后登录后点击" New repository " 如下图所示：',
             '之后在在Repository name 填入 runoob-git-test(远程仓库名)，其他保持默认设置，点击"Create '
             'repository"按钮，就成功地创建了一个新的Git仓库：',
             '创建成功后，显示如下信息：',
             '以上信息告诉我们可以从这个仓库克隆出新的仓库，也可以把本地仓库的内容推送到GitHub仓库。',
             '现在，我们根据 GitHub 的提示，在本地的仓库下运行命令：',
             '以下命令请根据你在Github成功创建新仓库的地方复制，而不是根据我提供的命令，因为我们的Github用户名不一样，仓库名也不一样。',
             '接下来我们返回 Github 创建的仓库，就可以看到文件已上传到 Github上：',
             '要查看当前配置有哪些远程仓库，可以用命令：',
             '执行时加上 -v 参数，你还可以看到每个别名的实际链接地址。',
             'Git 有两个命令用来提取远程仓库的更新。',
             '1、从远程仓库下载新分支与数据：',
             '该命令执行完后需要执行git merge 远程分支到你所在的分支。',
             '2、从远端仓库提取数据并尝试合并到当前分支：',
             '该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支。',
             '假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行 ',
             ' 告诉 Git 去获取它有你没有的数据，然后你可以执行 ',
             ' 以将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支。',
             '接下来我们在 Github 上点击" README.md" 并在线修改它:',
             '然后我们在本地更新修改。',
             '以上信息"0205aab..febd8ed  master     -> origin/master" 说明 master '
             '分支已被更新，我们可以使用以下命令将更新同步到本地：',
             '查看  README.md  文件内容：',
             '推送你的新分支与数据到某个远端仓库命令:',
             '以上命令将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支，实例如下。',
             '重新回到我们的 Github 仓库，可以看到文件以及提交上来了：',
             '删除远程仓库你可以使用命令：'],
 'href': 'https://www.runoob.com/git/git-remote-repo.html',
 'image': ['//www.runoob.com/wp-content/uploads/2015/03/github1.jpg',
           '//www.runoob.com/wp-content/uploads/2015/03/299CF000-7B6E-4BEC-B8C2-D9AEB053307B.jpg',
           '//www.runoob.com/wp-content/uploads/2015/03/1BCB4379-1A25-4C77-BB82-92B3E7185435.jpg',
           '/wp-content/uploads/2015/03/53CA927D-F36F-4A00-AFB2-5EAED05B535E.jpg'],
 'title': 'Git 远程仓库(Github)'}{'content': ['Git 不仅仅是个版本控制系统，它也是个内容管理系统(CMS)，工作管理系统等。',
             '如果你是一个具有使用 SVN 背景的人，你需要做一定的思想转换，来适应 Git 提供的一些概念和特征。',
             'Git 与 SVN 区别点：',
             '本站也提供了 Git 快速入门版本，你可以点击 ',
             ' 查看。',
             '入门后建议通过本站详细学习 Git 教程。',
             'Git 完整命令手册地址：',
             'PDF 版命令手册：'],
 'href': 'https://www.runoob.com/git/git-tutorial.html',
 'image': [],
 'title': 'Git 教程'}{'content': ['如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。',
             '比如说，我们想为我们的 runoob 项目发布一个"1.0"版本。 我们可以用 git tag -a v1.0 '
             '命令给最新一次提交打上（HEAD）"v1.0"的标签。',
             ' -a 选项意为"创建一个带注解的标签"。 不用 -a '
             '选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。',
             '当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。',
             '现在，注意当我们执行 git log --decorate 时，我们可以看到我们的标签了：',
             '如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。',
             ' 例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：',
             '如果我们要查看所有标签可以使用以下命令：',
             '指定标签信息命令：',
             'PGP签名标签命令：'],
 'href': 'https://www.runoob.com/git/git-tag.html',
 'image': [],
 'title': 'Git 标签'}{'content': ['Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。本章将对有关创建与提交你的项目快照的命令作介绍。',
             '用 git init 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。',
             '在目录中执行 git init，就可以创建一个 Git 仓库了。比如我们创建 runoob 项目：',
             '现在你可以看到在你的项目中生成了 .git 这个子目录。 这就是你的 Git 仓库了，所有有关你的此项目的快照数据都存放在这里。',
             '使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。',
             '如果你需要与他人合作一个项目，或者想要复制一个项目，看看代码，你就可以克隆那个项目。 执行命令：',
             '[url] 为你想要复制的项目，就可以了。',
             '例如我们克隆 Github 上的项目：',
             '克隆完成后，在当前目录下会生成一个 simplegit 目录：',
             '上述操作将复制该项目的全部记录。',
             '默认情况下，Git 会按照你提供的 URL 所指示的项目的名称创建你的本地项目目录。 通常就是该 URL 最后一个 / '
             '之后的项目名称。如果你想要一个不一样的名字， 你可以在该命令后加上你想要的名称。',
             'Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。本章将对有关创建与提交你的项目的快照的命令作介绍。',
             ' git add 命令可将该文件添加到缓存，如我们添加以下两个文件：',
             'git status 命令用于查看项目的当前状态。',
             '接下来我们执行 git add 命令来添加文件：',
             '现在我们再执行 git status，就可以看到这两个文件已经加上去了。',
             '新项目中，添加所有文件很普遍，我们可以使用 ',
             ' 命令来添加当前项目的所有文件。',
             '现在我们修改 README 文件：',
             '在 README 添加以下内容：',
             '，然后保存退出。',
             '再执行一下 git status：',
             '"AM" 状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们再执行 ',
             ' 命令将其添加到缓存中：',
             '当你要将你的修改包含在即将提交的快照里的时候，需要执行 git add。',
             'git status 以查看在你上次提交之后是否有修改。',
             '我演示该命令的时候加了 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容：',
             '执行 git diff 来查看执行 git status 的结果的详细信息。',
             'git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。',
             '在 hello.php 文件中输入以下内容：',
             'git status 显示你上次提交更新后的更改或者写入缓存的改动， 而 git diff 一行一行地显示这些改动具体是啥。',
             '接下来我们来查看下 git diff --cached 的执行效果：',
             '使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。',
             ' Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。',
             '接下来我们写入缓存，并提交对 hello.php 的所有改动。在首个例子中，我们使用 -m 选项以在命令行中提供提交注释。',
             '现在我们已经记录了快照。如果我们再执行 git status:',
             '以上输出说明我们在最近一次提交之后，没有做任何改动，是一个"working directory clean：干净的工作目录"。',
             '如果你没有设置 -m 选项，Git 会尝试为你打开一个编辑器以填写提交信息。 如果 Git '
             '在你对它的配置中找不到相关信息，默认会打开 vim。屏幕会像这样：',
             '如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：',
             '我们先修改 hello.php 文件为以下内容：',
             '再执行以下命令：',
             'git reset HEAD 命令用于取消已缓存的内容。',
             '我们先改动文件 README 文件，内容如下：',
             'hello.php 文件修改为：',
             '现在两个文件修改后，都提交到了缓存区，我们现在要取消其中一个的缓存，操作如下：',
             '现在你执行 git commit，只会将 README 文件的改动提交，而 hello.php 是没有的。',
             '可以看到 hello.php 文件的修改并未提交。',
             '这时我们可以使用以下命令将 hello.php 的修改提交：',
             '简而言之，执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存。',
             '如果只是简单地从工作目录中手工删除文件，运行 ',
             ' 时就会在 ',
             ' 的提示。',
             '要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以用以下命令完成此项工作',
             '如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 ',
             '如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 ',
             ' 选项即可',
             '如我们删除 hello.php文件：',
             '不从工作区中删除文件：',
             '可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件：',
             '进入某个目录中，执行此语句，会删除该目录下的所有文件和子目录。',
             'git mv 命令用于移动或重命名一个文件、目录、软连接。',
             '我们先把刚移除的 README 添加回来：',
             '然后对其重名:'],
 'href': 'https://www.runoob.com/git/git-basic-operations.html',
 'image': [],
 'title': 'Git 基本操作'}{'content': ['几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。',
             '有人把 Git 的分支模型称为',
             '，而正是因为它，将 ',
             ' 从版本控制系统家族里区分出来。',
             '创建分支命令：',
             '切换分支命令:',
             '当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。',
             '合并分支命令:',
             '你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。',
             '开始前我们先创建一个测试目录：',
             '列出分支基本命令：',
             '没有参数时，',
             ' 会列出你在本地的分支。',
             '此例的意思就是，我们有一个叫做 ',
             ' 的分支，并且该分支是当前分支。 ',
             '当你执行 ',
             ' 的时候，默认情况下 Git 就会为你创建 ',
             ' 分支。',
             '如果我们要手动创建一个分支。执行 ',
             ' 即可。',
             '现在我们可以看到，有了一个新分支 ',
             '。',
             '当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了 ',
             ' 分支，Git 将还原你的工作目录到你创建分支时候的样子。',
             '接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。',
             '当我们切换到 ',
             ' 分支的时候，我们添加的新文件 test.txt 被移除了。切换回 ',
             ' 分支的时候，它们有重新出现了。',
             '我们也可以使用 git checkout -b (branchname)  '
             '命令来创建新分支并立即切换到该分支下，从而在该分支中操作。',
             '如你所见，我们创建了一个分支，在该分支的上移除了一些文件 test.txt，并添加了 runoob.php '
             '文件，然后切换回我们的主分支，删除的 test.txt 文件又回来了，且新增加的 runoob.php 不存在主分支中。 ',
             '使用分支将工作切分开来，从而让我们能够在不同开发环境中做事，并来回切换。',
             '删除分支命令：',
             '例如我们要删除 testing 分支：',
             '一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：',
             '以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。',
             '合并完后就可以删除分支:',
             '删除后， 就只剩下 master 分支了：',
             '合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。',
             '首先，我们创建一个叫做 change_site 的分支，切换过去，我们将 runoob.php 内容改为:',
             '创建 change_site 分支：',
             '将修改的内容提交到  change_site 分支中。 现在，假如切换回  master  '
             '分支我们可以看内容恢复到我们修改前的(空文件，没有代码)，我们再次修改 runoob.php  文件。 ',
             '现在这些改变已经记录到我的 "master" 分支了。接下来我们将 "change_site" 分支合并过来。',
             '我们将前一个分支合并到  master  分支，一个合并冲突就出现了，接下来我们需要手动去修改它。',
             '在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决',
             '现在我们成功解决了合并中的冲突，并提交了结果。'],
 'href': 'https://www.runoob.com/git/git-branch.html',
 'image': [],
 'title': 'Git 分支管理'}{'content': ['在使用Git前我们需要先安装 Git。Git 目前支持 Linux/Unix、Solaris、Mac和 Windows '
             '平台上运行。',
             'Git 各平台安装包下载地址为：',
             '',
             'Git 的工作需要调用 curl，zlib，openssl，expat，libiconv '
             '等库的代码，所以需要先安装这些依赖工具。',
             '在有 yum 的系统上（比如 Fedora）或者有 apt-get 的系统上（比如 Debian 体系），可以用下面的命令安装：',
             '各 Linux 系统可以使用其安装包管理工具（apt-get、yum 等）进行安装：',
             'Debian/Ubuntu Git 安装命令为：',
             '如果你使用的系统是 Centos/RedHat 安装命令为：',
             '我们也可以在官网下载源码包来安装，最新源码包下载地址：',
             '安装指定系统的依赖包：',
             '解压安装下载的源码包：',
             '在 Windows 平台上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub '
             '的页面上下载 exe 安装文件并运行：',
             '安装包下载地址：',
             '完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。',
             '在开始菜单里找到"Git"->"Git Bash"，会弹出 Git 命令窗口，你可以在该窗口进行 Git 操作。',
             '在 Mac 平台上安装 Git 最容易的当属使用图形化的 Git 安装工具，下载地址为：',
             '',
             '安装界面如下所示：',
             'Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。',
             '这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：',
             '在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME '
             '变量指定的目录，一般都是 C:\\Documents and Settings\\$USER。',
             '此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。',
             '配置个人的用户名称和电子邮件地址：',
             '如果用了 ',
             ' 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。',
             '如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 '
             '.git/config 文件里。',
             '设置Git默认使用的文本编辑器,一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：:',
             '还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：',
             'Git 可以理解 '
             'kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 '
             'opendiff 等合并工具的输出信息。',
             '当然，你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章。',
             '要检查已有的配置信息，可以使用 git config --list 命令：',
             '有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 '
             '~/.gitconfig），不过最终 Git 实际采用的是最后一个。',
             '这些配置我们也可以在 ',
             ' 或 ',
             ' 看到，如下所示：',
             '显示内容如下所示：',
             '也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：'],
 'href': 'https://www.runoob.com/git/git-install-setup.html',
 'image': ['//www.runoob.com/wp-content/uploads/2015/02/20140127131250906',
           '//www.runoob.com/wp-content/uploads/2015/02/18333fig0107-tn.png'],
 'title': 'Git 安装配置'}{'content': ['上一章节中我们远程仓库使用了 Github，Github 公开的项目是免费的，2019 年开始 Github '
             '私有存储库也可以无限制使用。',
             '这当然我们也可以自己搭建一台 Git 服务器作为私有仓库使用。',
             '接下来我们将以 Centos 为例搭建 Git 服务器。',
             '接下来我们创建一个git用户组和用户，用来运行git服务：',
             '收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。',
             '如果没有该文件创建它：',
             '首先我们选定一个目录作为Git仓库，假定是/home/gitrepo/runoob.git，在/home/gitrepo目录下输入命令：',
             '以上命令Git创建一个空仓库，服务器上的Git仓库通常都以.git结尾。然后，把仓库所属用户改为git：',
             '192.168.45.4 为 Git 所在服务器 ip ，你需要将其修改为你自己的 Git 服务 ip。',
             '这样我们的 Git 服务器安装就完成。'],
 'href': 'https://www.runoob.com/git/git-server.html',
 'image': [],
 'title': 'Git 服务器搭建'}{'content': ['本章节我们将为大家介绍如何创建一个 Git 仓库。',
             '你可以使用一个已经存在的目录作为Git仓库。',
             'Git 使用 ',
             ' 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 ',
             ' 是使用 Git 的第一个命令。',
             '在执行完成 ',
             ' 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN '
             '会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。',
             '使用当前目录作为Git仓库，我们只需使它初始化。',
             '该命令执行完后会在当前目录生成一个 .git 目录。',
             '使用我们指定目录作为Git仓库。',
             '初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。',
             '如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：',
             '以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。',
             '我们使用 ',
             ' 从现有 Git 仓库中拷贝项目（类似 ',
             '）。',
             '克隆仓库的命令格式为：',
             '如果我们需要克隆到指定的目录，可以使用以下命令格式：',
             '比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：',
             '执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。'],
 'href': 'https://www.runoob.com/git/git-create-repository.html',
 'image': [],
 'title': 'Git 创建仓库'}{'content': ['本章节我们将为大家介绍 Git 的工作流程。', '一般工作流程如下：', '下图展示了 Git 的工作流程：'],
 'href': 'https://www.runoob.com/git/git-workflow.html',
 'image': ['//www.runoob.com/wp-content/uploads/2015/02/git-process.png'],
 'title': 'Git 工作流程'}{'content': ['字典是另一种可变容器模型，且可存储任意类型对象。',
             '字典的每个键值 ',
             ' 对用冒号 ',
             ' 分割，每个键值对之间用逗号 ',
             ' 分割，整个字典包括在花括号 ',
             ' 中 ,格式如下所示：',
             '键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。',
             '值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。',
             '一个简单的字典实例：',
             '也可如此创建字典：',
             '把相应的键放入熟悉的方括弧，如下实例:',
             '以上实例输出结果：',
             '如果用字典里没有的键访问数据，会输出错误如下：',
             '以上实例输出结果：',
             '向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对如下实例:',
             '能删单一的元素也能清空字典，清空只需一项操作。',
             '显示删除一个字典用del命令，如下实例：',
             '但这会引发一个异常，因为用del后字典不再存在：',
             'del()方法后面也会讨论。',
             '字典值可以没有限制地取任何python对象，既可以是标准的对象，也可以是用户定义的，但键不行。',
             '两个重要的点需要记住：',
             '',
             '1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，如下实例：',
             '',
             '以上实例输出结果：',
             '2）键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行，如下实例：',
             '以上实例输出结果：',
             'Python字典包含了以下内置函数：',
             'Python字典包含了以下内置方法：'],
 'href': 'https://www.runoob.com/python/python-dictionary.html',
 'image': [],
 'title': 'Python 字典(Dictionary)'}{'content': ['Python 语言允许在一个循环体里面嵌入另一个循环。',
             '你可以在循环体内嵌入其他的循环体，如在while循环中可以嵌入for循环，反之，你可以在for循环中嵌入while循环。',
             '以下实例使用了嵌套循环输出2~100之间的素数：',
             '以上实例输出结果:'],
 'href': 'https://www.runoob.com/python/python-nested-loops.html',
 'image': [],
 'title': 'Python 循环嵌套'}{'content': ['Python continue 语句跳出本次循环，而break跳出整个循环。',
             'continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。',
             'continue语句用在while和for循环中。',
             '以上实例执行结果：'],
 'href': 'https://www.runoob.com/python/python-continue-statement.html',
 'image': [],
 'title': 'Python continue  语句'}{'content': ['Python pass 是空语句，是为了保持程序结构的完整性。',
             ' 不做任何事情，一般用做占位语句。',
             'Python 语言 pass 语句语法格式如下：',
             '测试实例：',
             '以上实例执行结果：'],
 'href': 'https://www.runoob.com/python/python-pass-statement.html',
 'image': [],
 'title': 'Python pass 语句'}{'content': ['Python break语句，就像在C语言中，打破了最小封闭for或while循环。',
             'break语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。',
             ' break语句用在while和for循环中。',
             '如果您使用嵌套循环，break语句将停止执行最深层的循环，并开始执行下一行代码。',
             '以上实例执行结果：'],
 'href': 'https://www.runoob.com/python/python-break-statement.html',
 'image': [],
 'title': 'Python break 语句'}{'content': ['字符串是 Python 中最常用的数据类型。我们可以使用引号(\'或")来创建字符串。',
             '创建字符串很简单，只要为变量分配一个值即可。例如：',
             'Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。',
             'Python 访问子字符串，可以使用方括号来截取字符串，如下实例：',
             '以上实例执行结果：',
             '我们可以对字符串进行截取并与其他字符串进行连接，如下实例：',
             '以上实例执行结果',
             '在需要在字符中使用特殊字符时，python 用反斜杠 ',
             ' 转义字符。如下表：',
             '下表实例变量 a 值为字符串 "Hello"，b 变量值为 "Python"：',
             '以上程序执行结果为：',
             'Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 '
             '%s 的字符串中。',
             '在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。',
             '如下实例：',
             '以上实例输出结果：',
             'python 字符串格式化符号:',
             '格式化操作符辅助指令:',
             'Python2.6 开始，新增了一种格式化字符串的函数 ',
             '，它增强了字符串格式化的功能。',
             'python中三引号可以将复杂的字符串进行复制:',
             'python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。',
             '三引号的语法是一对连续的单引号或者双引号（通常都是成对的用）。',
             '三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（所见即所得）格式的。',
             '一个典型的用例是，当你需要一块HTML或者SQL时，这时当用三引号标记，使用传统的转义字符体系将十分费神。',
             'Python 中定义一个 Unicode 字符串和定义一个普通字符串一样简单：',
             '引号前小写的"u"表示这里创建的是一个 Unicode 字符串。如果你想加入一个特殊字符，可以使用 Python 的 '
             'Unicode-Escape 编码。如下例所示：',
             '被替换的 \\u0020 标识表示在给定位置插入编码值为 0x0020 的 Unicode 字符（空格符）。',
             '字符串方法是从python1.6到2.0慢慢加进来的——它们也被加到了Jython中。',
             '这些方法实现了string模块的大部分方法，如下表所示列出了目前字符串内建支持的方法，所有的方法都包含了对Unicode的支持，有一些甚至是专门用于Unicode的。'],
 'href': 'https://www.runoob.com/python/python-strings.html',
 'image': [],
 'title': 'Python 字符串'}{'content': ['Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。',
             'for循环的语法格式如下：',
             '以上实例输出结果:',
             '另外一种执行循环的遍历方式是通过索引，如下实例：',
             '以上实例输出结果：',
             '以上实例我们使用了内置函数 len() 和 range(),函数 len() '
             '返回列表的长度，即元素的个数。range返回一个序列的数。',
             '在 python 中，for … else 表示这样的意思，for 中的语句和普通的没有区别，else '
             '中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行，while … else 也是一样。',
             '以上实例输出结果：',
             '更多实例：'],
 'href': 'https://www.runoob.com/python/python-for-loop.html',
 'image': [],
 'title': 'Python for 循环语句'}{'content': ['Python 编程中 while '
             '语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。其基本形式为：',
             '执行语句可以是单个语句或语句块。判断条件可以是任何表达式，任何非零、或非空（null）的值均为true。',
             '当判断条件假 false 时，循环结束。',
             '执行流程图如下：',
             '复杂一点:',
             '',
             '以上代码执行输出结果:',
             'while 语句时还有另外两个重要的命令 continue，break 来跳过循环，continue '
             '用于跳过该次循环，break 则是用于退出循环，此外"判断条件"还可以是个常值，表示循环必定成立，具体用法如下：',
             '如果条件判断语句永远为 true，循环将会无限的执行下去，如下实例：',
             '',
             '以上实例输出结果：',
             '以上的无限循环你可以使用  CTRL+C 来中断循环。',
             '在 python 中，while … else 在循环条件为 false 时执行 else 语句块：',
             '以上实例输出结果为：',
             '类似 if 语句的语法，如果你的 while 循环体中只有一条语句，你可以将该语句与while写在同一行中，如下所示：',
             '以上的无限循环你可以使用  ',
             ' 来中断循环。'],
 'href': 'https://www.runoob.com/python/python-while-loop.html',
 'image': [],
 'title': 'Python While 循环语句'}{'content': ['本章节将向大家介绍Python的循环语句，程序在一般情况下是按顺序执行的。',
             '编程语言提供了各种控制结构，允许更复杂的执行路径。',
             '循环语句允许我们执行一个语句或语句组多次，下面是在大多数编程语言中的循环语句的一般形式：',
             'Python 提供了 for 循环和 while 循环（在 Python 中没有 do..while 循环）:',
             '循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：'],
 'href': 'https://www.runoob.com/python/python-loops.html',
 'image': [],
 'title': 'Python 循环语句'}{'content': ['Python Number 数据类型用于存储数值。',
             '数据类型是不允许改变的,这就意味着如果改变 Number 数据类型的值，将重新分配内存空间。',
             '以下实例在变量赋值时 Number 对象将被创建：',
             '您也可以使用del语句删除一些 Number 对象引用。 ',
             'del语句的语法是：',
             '您可以通过使用del语句删除单个或多个对象，例如：',
             'Python 支持四种不同的数值类型：',
             'Python 中数学运算常用的函数基本都在 math 模块、cmath 模块中。',
             'Python  math 模块提供了许多对浮点数的数学运算函数。',
             'Python cmath 模块包含了一些用于复数运算的函数。',
             'cmath 模块的函数跟 math 模块函数基本一致，区别是 cmath 模块运算的是复数，math 模块运算的是数学运算。',
             '要使用 math 或 cmath 函数必须先导入：',
             '查看 math 查看包中的内容:',
             '下文会介绍各个函数的具体应用。',
             '查看 cmath 查看包中的内容',
             '实例',
             '随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。',
             'Python包含以下常用随机数函数：',
             'Python包括以下三角函数：'],
 'href': 'https://www.runoob.com/python/python-numbers.html',
 'image': [],
 'title': 'Python Number(数字)'}{'content': ['Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。',
             '可以通过下图来简单了解条件语句的执行过程:',
             '',
             '',
             'Python程序语言指定任何非0和非空（null）值为true，0 或者 null为false。',
             'Python 编程中 if 语句用于控制程序的执行，基本形式为：',
             '其中"判断条件"成立时（非零），则执行后面的语句，而执行内容可以多行，以缩进来区分表示同一范围。',
             'else 为可选语句，当需要在条件不成立时执行内容则可以执行相关语句。',
             'Gif 演示：',
             '具体例子如下：\t',
             '输出结果为：',
             'if 语句的判断条件可以用>（大于）、=（大于等于）、<=（小于等于）来表示其关系。',
             '当判断条件为多个值时，可以使用以下形式：',
             '实例如下：',
             '输出结果为：',
             '由于 python 并不支持 switch 语句，所以多个条件判断，只能用 elif '
             '来实现，如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and '
             '（与）时，表示只有两个条件同时成立的情况下，判断条件才成功。',
             '当if有多个条件时可使用括号来区分判断的先后顺序，括号中的判断优先执行，此外 and 和 or 的优先级低于>（大于）、',
             '你也可以在同一行的位置上使用if条件判断语句，如下实例：',
             '以上代码执行输出结果如下：'],
 'href': 'https://www.runoob.com/python/python-if-statement.html',
 'image': [],
 'title': 'Python 条件语句'}{'content': ['本章节主要说明Python的运算符。举个简单的例子',
             '。例子中，',
             ' 和 ',
             ' 被称为',
             '，"',
             '" 称为运算符。',
             'Python语言支持以下类型的运算符:',
             '接下来让我们一个个来学习Python的运算符。',
             '以下假设变量：',
             '：',
             '以下实例演示了Python所有算术运算符的操作：',
             '以上实例输出结果：',
             '以下假设变量a为10，变量b为20：',
             '以下实例演示了Python所有比较运算符的操作：',
             '以上实例输出结果：',
             '以下假设变量a为10，变量b为20：',
             '以下实例演示了Python所有赋值运算符的操作：',
             '以上实例输出结果：',
             '按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：',
             '下表中变量 a 为 60，b 为 13，二进制格式如下：',
             '以下实例演示了Python所有位运算符的操作：',
             '以上实例输出结果：',
             'Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:',
             '以上实例输出结果：',
             '以上实例输出结果：',
             '除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。',
             '以下实例演示了Python所有成员运算符的操作：',
             '以上实例输出结果：',
             ' 身份运算符用于比较两个对象的存储单元',
             ' ',
             ' 函数用于获取对象内存地址。',
             '以下实例演示了Python所有身份运算符的操作：',
             '以上实例输出结果：',
             '以下表格列出了从最高到最低优先级的所有运算符：',
             '以下实例演示了Python所有运算符优先级的操作：',
             '以上实例输出结果：'],
 'href': 'https://www.runoob.com/python/python-operators.html',
 'image': [],
 'title': 'Python 运算符'}{'content': ['Python的元组与列表类似，不同之处在于元组的元素不能修改。',
             '元组使用小括号，列表使用方括号。',
             '元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。',
             '如下实例：',
             '创建空元组',
             '元组中只包含一个元素时，需要在元素后面添加逗号',
             '元组与字符串类似，下标索引从0开始，可以进行截取，组合等。',
             '元组可以使用下标索引来访问元组中的值，如下实例:',
             '以上实例输出结果：',
             '元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:',
             '以上实例输出结果：',
             '元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:',
             '以上实例元组被删除后，输出变量会有异常信息，输出如下所示：',
             '与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。',
             '因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素，如下所示：',
             '元组：',
             '任意无符号的对象，以逗号隔开，默认为元组，如下实例：',
             '以上实例运行结果：',
             'Python元组包含了以下内置函数'],
 'href': 'https://www.runoob.com/python/python-tuples.html',
 'image': [],
 'title': 'Python 元组'}{'content': ['Python 中的变量赋值不需要类型声明。',
             '每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。',
             '每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。',
             '等号（=）用来给变量赋值。',
             '等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：',
             '以上实例中，100，1000.0和"John"分别赋值给counter，miles，name变量。',
             '执行以上程序会输出如下结果：',
             'Python允许你同时为多个变量赋值。例如：',
             '以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。',
             '您也可以为多个对象指定多个变量。例如：',
             '以上实例，两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 "john" 分配给变量 c。',
             '在内存中存储的数据可以有多种类型。',
             '例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。',
             'Python 定义了一些标准类型，用于存储各种类型的数据。',
             'Python有五个标准的数据类型：',
             '数字数据类型用于存储数值。',
             '他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。',
             '当你指定一个值时，Number对象就会被创建：',
             '您也可以使用del语句删除一些对象的引用。',
             ' del语句的语法是：',
             '您可以通过使用del语句删除单个或多个对象的引用。例如：',
             'Python支持四种不同的数字类型：',
             '一些数值类型的实例：',
             '字符串或串(String)是由数字、字母、下划线组成的一串字符。',
             '一般记为 :',
             '它是编程语言中表示文本的数据类型。 ',
             'python的字串列表有2种取值顺序:',
             '如果你要实现从字符串中获取一段子字符串的话，可以使用 ',
             ' 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。',
             ' 获取的子字符串包含头下标的字符，但不包含尾下标的字符。',
             '比如:',
             '当使用以冒号分隔的字符串，python 返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。',
             '上面的结果包含了 ',
             ' 的值 b，而取到的最大范围不包括',
             '，就是 ',
             ' 的值 f。',
             '加号（+）是字符串连接运算符，星号（*）是重复操作。如下实例：',
             '以上实例输出结果：',
             'Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 '
             '2（间隔一个位置）来截取字符串：',
             'List（列表） 是 Python 中使用最频繁的数据类型。',
             '列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。',
             '列表用 ',
             ' 标识，是 python 最通用的复合数据类型。',
             '列表中值的切割也可以用到变量 ',
             ' ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。',
             '加号 ',
             ' 是列表连接运算符，星号 ',
             ' 是重复操作。如下实例：',
             '以上实例输出结果：',
             '',
             '元组是另一个数据类型，类似于 List（列表）。',
             '元组用 ',
             '  标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。',
             '以上实例输出结果：',
             '以下是元组无效的，因为元组是不允许更新的。而列表是允许更新的：',
             '字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。',
             '两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。',
             '字典用"{ }"标识。字典由索引(key)和它对应的值value组成。',
             '输出结果为：',
             '有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。',
             '以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。'],
 'href': 'https://www.runoob.com/python/python-variable-types.html',
 'image': [],
 'title': 'Python 变量类型'}{'content': ['Python 语言与 Perl，C 和 Java 等语言有许多相似之处。但是，也存在一些差异。',
             '在本章中我们将来学习 Python 的基础语法，让你快速学会 Python 编程。',
             '交互式编程不需要创建脚本文件，是通过 Python 解释器的交互模式进来编写代码。',
             'linux上你只需要在命令行中输入 Python 命令即可启动交互式编程,提示窗口如下：',
             'Window 上在安装 Python 时已经安装了交互式编程客户端，提示窗口如下：',
             '在 python 提示符中输入以下文本信息，然后按 Enter 键查看运行效果：',
             '在 Python  2.7.6 版本中,以上实例输出结果如下：',
             '通过脚本参数调用解释器开始执行脚本，直到脚本执行完毕。当脚本执行完成后，解释器不再有效。',
             '让我们写一个简单的 Python 脚本程序。所有 Python 文件将以 ',
             ' 为扩展名。将以下的源代码拷贝至 test.py 文件中。',
             '这里，假设你已经设置了 Python 解释器 PATH 变量。使用以下命令运行程序：',
             '输出结果：',
             '让我们尝试另一种方式来执行 Python 脚本。修改 test.py 文件，如下所示：',
             '这里，假定您的Python解释器在/usr/bin目录中，使用以下命令执行脚本：',
             '输出结果：',
             '在 Python 里，标识符由字母、数字、下划线组成。',
             '在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。',
             'Python 中的标识符是区分大小写的。',
             '以下划线开头的标识符是有特殊意义的。以单下划线开头 ',
             ' 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 ',
             ' 而导入。',
             '以双下划线开头的 ',
             ' 代表类的私有成员，以双下划线开头和结尾的 ',
             ' 代表 Python 里特殊方法专用的标识，如 ',
             ' 代表类的构造函数。',
             'Python 可以同一行显示多条语句，方法是用分号 ',
             ' 分开，如：',
             '下面的列表显示了在Python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。',
             '所有 Python 的关键字只包含小写字母。',
             '学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 ',
             ' 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。',
             '缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。',
             '以下实例缩进为四个空格:',
             '以下代码将会执行错误：',
             ' 执行以上代码，会出现如下错误提醒：',
             '错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。',
             '如果是  ',
             ' 错误, 则 python 编译器是在告诉你"',
             '"，所有 python 对格式要求非常严格。',
             '因此，在 Python 的代码块中必须使用相同数目的行首缩进空格数。',
             '建议你在每个缩进层次使用 ',
             ' 或 ',
             ' 或 ',
             ' , 切记不能混用',
             'Python语句中一般以新行作为语句的结束符。',
             '但是我们可以使用斜杠（ \\）将一行的语句分为多行显示，如下所示：',
             '语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：',
             'Python 可以使用引号( ',
             ' )、双引号( ',
             ' )、三引号( ',
             ' 或 ',
             ' ) 来表示字符串，引号的开始与结束必须的相同类型的。 ',
             '其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。',
             'python中单行注释采用 # 开头。',
             '输出结果：',
             '注释可以在语句或表达式行末：',
             'python 中多行注释使用三个单引号(\'\'\')或三个双引号(""")。',
             '函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。',
             '空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。',
             '记住：空行也是程序代码的一部分。',
             '下面的程序执行后就会等待用户输入，按回车键后就会退出：',
             '以上代码中 ，',
             ' 实现换行。一旦用户按下 enter(回车) 键退出，其它键显示。',
             '执行以上代码，输入结果为：',
             'print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号 ',
             '。',
             '以上实例执行结果为：',
             '缩进相同的一组语句构成一个代码块，我们称之代码组。',
             '像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : '
             ')结束，该行之后的一行或多行代码构成代码组。',
             '我们将首行及后面的代码组称为一个子句(clause)。',
             '如下实例：',
             '很多程序可以执行一些操作来查看一些基本信息，Python 可以使用 ',
             ' 参数查看各参数帮助信息：',
             '我们在使用脚本形式执行 Python 时，可以接收命令行输入的参数，具体使用可以参照 ',
             '。'],
 'href': 'https://www.runoob.com/python/python-basic-syntax.html',
 'image': [],
 'title': 'Python 基础语法'}{'content': [],
 'href': 'https://www.runoob.com/quiz/python-quiz.html',
 'image': [],
 'title': 'Python 测验'}{'content': ['以下实例在Python2.7下测试通过：'],
 'href': 'https://www.runoob.com/python/python-100-examples.html',
 'image': [],
 'title': 'Python 100例'}{'content': ['本章节我们将为大家介绍如何使用 Python 语言来编码和解码 JSON 对象。',
             'JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式，易于人阅读和编写。',
             '使用 JSON 函数需要导入 json 库：',
             '。',
             'json.dumps 用于将 Python 对象编码成 JSON 字符串。',
             '以下实例将数组编码为 JSON 格式数据：',
             '以上代码执行结果为：',
             '使用参数让 JSON 数据格式化输出：',
             'python 原始类型向 json 类型的转化对照表：',
             'json.loads 用于解码 JSON 数据。该函数返回 Python 字段的数据类型。',
             '以下实例展示了Python 如何解码 JSON 对象：',
             '以上代码执行结果为：',
             'json 类型转换到 python 的类型对照表：',
             '更多内容参考：',
             '。',
             'Demjson 是 python 的第三方模块库，可用于编码和解码 JSON 数据，包含了 JSONLint '
             '的格式化及校验功能。',
             'Github 地址：',
             '官方地址：',
             '在使用 Demjson 编码或解码 JSON 数据前，我们需要先安装 Demjson 模块。本教程我们会下载 ',
             ' 并安装：',
             '更多安装介绍查看：',
             'Python encode() 函数用于将 Python 对象编码成 JSON 字符串。',
             '以下实例将数组编码为 JSON 格式数据：',
             '以上代码执行结果为：',
             'Python 可以使用 demjson.decode() 函数解码 JSON 数据。该函数返回 Python 字段的数据类型。',
             '以下实例展示了Python 如何解码 JSON 对象：',
             '以上代码执行结果为：'],
 'href': 'https://www.runoob.com/python/python-json.html',
 'image': [],
 'title': 'Python JSON'}{'content': ['Python的3\u200b\u200b.0版本，常被称为Python '
             '3000，或简称Py3k。相对于Python的早期版本，这是一个较大的升级。',
             '为了不带入过多的累赘，Python 3.0在设计的时候没有考虑向下相容。',
             '许多针对早期Python版本设计的程式都无法在Python 3.0上正常执行。',
             '为了照顾现有程式，Python 2.6作为一个过渡版本，基本使用了Python 2.x的语法和库，同时考虑了向Python '
             '3.0的迁移，允许使用部分Python 3.0的语法与函数。',
             '新的Python程式建议使用Python 3.0版本的语法。',
             '除非执行环境无法安装Python 3.0或者程式本身使用了不支援Python 3.0的第三方库。目前不支援Python '
             '3.0的第三方库有Twisted, py2exe, PIL等。',
             '大多数第三方库都正在努力地相容Python 3.0版本。即使无法立即使用Python 3.0，也建议编写相容Python '
             '3.0版本的程式，然后使用Python 2.6, Python 2.7来执行。',
             'Python 3.0的变化主要在以下几个方面:',
             'print语句没有了，取而代之的是print()函数。 Python 2.6与Python '
             '2.7部分地支持这种形式的print语法。在Python 2.6与Python 2.7里面，以下三种形式是等价的：',
             '然而，Python 2.6实际已经支持新的print()语法：',
             'Python 2 有 ASCII str() 类型，unicode() 是单独的，不是 byte 类型。',
             '现在， 在 Python 3，我们最终有了 Unicode (utf-8) 字符串，以及一个字节类：byte 和 '
             'bytearrays。',
             '由于 Python3.X 源码文件默认使用utf-8编码，这就使得以下代码是合法的： ',
             'Python 2.x',
             'Python 3.x',
             'Python中的除法较其它语言显得非常高端，有套很复杂的规则。Python中的除法有两个运算符，/和//',
             '首先来说/除法:',
             '在python '
             '2.x中/除法就跟我们熟悉的大多数语言，比如Java啊C啊差不多，整数相除的结果是一个整数，把小数部分完全忽略掉，浮点数除法会保留小数点的部分得到一个浮点数的结果。',
             '在python 3.x中/除法不再这么做了，对于整数之间的相除，结果也会是浮点数。',
             'Python 2.x:',
             'Python 3.x:',
             '而对于//除法，这种除法叫做floor除法，会对除法的结果自动进行一个floor操作，在python 2.x和python '
             '3.x中是一致的。',
             'python 2.x:',
             'python 3.x:',
             '注意的是并不是舍弃小数部分，而是执行 floor 操作，如果要截取整数部分，那么需要使用 math 模块的 trunc 函数',
             'python 3.x:',
             '在 Python 3 中处理异常也轻微的改变了，在 Python 3 中我们现在使用 as 作为关键词。',
             '捕获异常的语法由 ',
             ' 改为 ',
             '。',
             '使用语法except (exc1, exc2) as var可以同时捕获多种类别的异常。 Python '
             '2.6已经支持这两种语法。',
             '在2.x时代，异常在代码中除了表示程序错误，还经常做一些普通控制结构应该做的事情，在3.x中可以看出，设计者让异常变的更加专一，只有在错误发生的情况才能去用异常捕获语句来处理。',
             '在 Python 2 中 xrange() 创建迭代对象的用法是非常流行的。比如： for 循环或者是列表/集合/字典推导式。',
             '这个表现十分像生成器（比如。"惰性求值"）。但是这个 xrange-iterable 是无穷的，意味着你可以无限遍历。',
             '由于它的惰性求值，如果你不得仅仅不遍历它一次，xrange() 函数 比 range() 更快（比如 for '
             '循环）。尽管如此，对比迭代一次，不建议你重复迭代多次，因为生成器每次都从头开始。',
             '在 Python 3 中，range() 是像 xrange() 那样实现以至于一个专门的 xrange() 函数都不再存在（在 '
             'Python 3 中 xrange() 会抛出命名异常）。',
             'Python 2',
             'Python 3',
             '八进制数必须写成0o777，原来的形式0777不能用了；二进制必须写成0b111。',
             '新增了一个bin()函数用于将一个整数转换成二进制字串。 Python 2.6已经支持这两种语法。',
             '在Python 3.x中，表示八进制字面量的方式只有一种，就是0o1000。',
             'python 2.x',
             'python 3.x',
             'Python 2.x中不等于有两种写法 != 和 <>',
             'Python 3.x中去掉了<>, 只有!=一种写法，还好，我从来没有使用<>的习惯',
             'Python 2.x 中反引号``相当于repr函数的作用',
             'Python 3.x '
             '中去掉了``这种写法，只允许使用repr函数，这样做的目的是为了使代码看上去更清晰么？不过我感觉用repr的机会很少，一般只在debug的时候才用，多数时候还是用str函数来用字符串描述对象。',
             'StringIO模块现在被合并到新的io模组内。 new, md5, gopherlib等模块被删除。 Python '
             '2.6已经支援新的io模组。',
             'httplib, BaseHTTPServer, CGIHTTPServer, SimpleHTTPServer, '
             'Cookie, cookielib被合并到http包内。',
             '取消了exec语句，只剩下exec()函数。 Python 2.6已经支援exec()函数。',
             '1）Py3.X去除了long类型，现在只有一种整型——int，但它的行为就像2.X版本的long ',
             '2）新增了bytes类型，对应于2.X版本的八位串，定义一个bytes字面量的方法如下： ',
             'str 对象和 bytes 对象可以使用 .encode() (',
             ') 或 .decode() (',
             ')方法相互转化。 ',
             '3）dict的.keys()、.items '
             '和.values()方法返回迭代器，而之前的iterkeys()等函数都被废弃。同时去掉的还有 dict.has_key()，用 '
             'in替代它吧 。'],
 'href': 'https://www.runoob.com/python/python-2x-3x.html',
 'image': [],
 'title': 'Python2.x与3\u200b\u200b.x版本区别'}{'content': ['Python 提供了多个图形开发界面的库，几个常用 Python GUI 库如下：',
             'Tkinter 是 Python 的标准 GUI 库。Python 使用 Tkinter 可以快速的创建 GUI 应用程序。',
             '由于 Tkinter 是内置到 python 的安装包中、只要安装好 Python 之后就能 import Tkinter '
             '库、而且 IDLE 也是用 Tkinter 编写而成、对于简单的图形界面 Tkinter 还是能应付自如。',
             '创建一个GUI程序',
             '以上代码执行结果如下图:',
             '',
             '以上代码执行结果如下图:',
             'Tkinter的提供各种控件，如按钮，标签和文本框，一个GUI应用程序中使用。这些控件通常被称为控件或者部件。',
             '目前有15种Tkinter的部件。我们提出这些部件以及一个简短的介绍，在下面的表:',
             '标准属性也就是所有控件的共同属性，如大小，字体和颜色等等。',
             'Tkinter控件有特定的几何状态管理方法，管理整个控件区域组织，一下是Tkinter公开的几何管理类：包、网格、位置'],
 'href': 'https://www.runoob.com/python/python-gui-tkinter.html',
 'image': ['//www.runoob.com/wp-content/uploads/2013/12/tk.jpg'],
 'title': 'Python GUI 编程(Tkinter)'}{'content': ['多线程类似于同时执行多个不同程序，多线程运行有如下优点：',
             '线程在执行过程中与进程还是有区别的。每个独立的进程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。',
             '每个线程都有他自己的一组CPU寄存器，称为线程的上下文，该上下文反映了线程上次运行该线程的CPU寄存器的状态。',
             '指令指针和堆栈指针寄存器是线程上下文中两个最重要的寄存器，线程总是在进程得到上下文中运行的，这些地址都用于标志拥有线程的进程地址空间中的内存。',
             'Python中使用线程有两种方式：函数或者用类来包装线程对象。',
             '函数式：调用thread模块中的start_new_thread()函数来产生新线程。语法如下:',
             '参数说明:',
             '执行以上程序输出结果如下：',
             '线程的结束一般依靠线程函数的自然结束；也可以在线程函数中调用thread.exit()，他抛出SystemExit '
             'exception，达到退出线程的目的。',
             'Python通过两个标准库thread和threading提供对线程的支持。thread提供了低级别的、原始的线程以及一个简单的锁。',
             'threading 模块提供的其他方法： ',
             '除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法:',
             '使用Threading模块创建线程，直接从threading.Thread继承，然后重写__init__方法和run方法：',
             '以上程序执行结果如下；',
             '如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。',
             '使用Thread对象的Lock和Rlock可以实现简单的线程同步，这两个对象都有acquire方法和release方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到acquire和release方法之间。如下：',
             '多线程的优势在于可以同时运行多个任务（至少感觉起来是这样）。但是当线程需要共享数据时，可能存在数据不同步的问题。',
             '考虑这样一种情况：一个列表里所有元素都是0，线程"set"从后向前把所有元素改成1，而线程"print"负责从前往后读取列表并打印。',
             '那么，可能线程"set"开始改的时候，线程"print"便来打印列表了，输出就成了一半0一半1，这就是数据的不同步。为了避免这种情况，引入了锁的概念。',
             '锁有两种状态——锁定和未锁定。每当一个线程比如"set"要访问共享数据时，必须先获得锁定；如果已经有别的线程比如"print"获得锁定了，那么就让线程"set"暂停，也就是同步阻塞；等到线程"print"访问完毕，释放锁以后，再让线程"set"继续。',
             '经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的尴尬场面。',
             ' '
             'Python的Queue模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列PriorityQueue。这些队列都实现了锁原语，能够在多线程中直接使用。可以使用队列来实现线程间的同步。',
             'Queue模块中的常用方法:',
             '',
             '以上程序执行结果：'],
 'href': 'https://www.runoob.com/python/python-multithreading.html',
 'image': [],
 'title': 'Python 多线程'}{'content': ['SMTP（Simple Mail Transfer '
             'Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。',
             'python的smtplib提供了一种很方便的途径发送电子邮件。它对smtp协议进行了简单的封装。',
             'Python创建 SMTP 对象语法如下：',
             '参数说明：',
             'Python SMTP 对象使用 sendmail 方法发送邮件，语法如下：',
             '参数说明：',
             '这里要注意一下第三个参数，msg '
             '是字符串，表示邮件。我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，发送邮件的时候，要注意  msg '
             '的格式。这个格式就是 smtp 协议中定义的格式。',
             '以下执行实例需要你本机已安装了支持 SMTP 的服务，如：sendmail。',
             '以下是一个使用 Python 发送邮件简单的实例：',
             '我们使用三个引号来设置邮件信息，标准邮件需要三个头部信息： ',
             ', ',
             ', 和 ',
             ' ，每个信息直接使用空行分割。',
             '我们通过实例化 smtplib 模块的 SMTP 对象 ',
             ' 来连接到 SMTP 访问，并使用 ',
             ' 方法来发送信息。',
             '执行以上程序，如果你本机安装 ',
             '，就会输出：',
             '查看我们的收件箱(一般在垃圾箱)，就可以查看到邮件信息：',
             '如果我们本机没有 sendmail 访问，也可以使用其他邮件服务商的 SMTP 访问（QQ、网易、Google等）。',
             'Python发送HTML格式的邮件与发送纯文本消息的邮件不同之处就是将MIMEText中_subtype设置为html。具体代码如下：',
             '执行以上程序，如果你本机安装sendmail，就会输出：',
             '查看我们的收件箱(一般在垃圾箱)，就可以查看到邮件信息：',
             '发送带附件的邮件，首先要创建MIMEMultipart()实例，然后构造附件，如果有多个附件，可依次构造，最后利用smtplib.smtp发送。',
             '查看我们的收件箱(一般在垃圾箱)，就可以查看到邮件信息：',
             '邮件的 HTML 文本中一般邮件服务商添加外链是无效的，正确添加图片的实例如下所示：',
             '查看我们的收件箱(如果在垃圾箱可能需要移动到收件箱才可正常显示)，就可以查看到邮件信息：',
             '这里使用了 QQ 邮箱(你也可以使用 163，Gmail等)的 SMTP 服务，需要做以下配置：',
             'QQ 邮箱通过生成授权码来设置密码：',
             'QQ 邮箱 SMTP 服务器地址：smtp.qq.com，ssl 端口：465。',
             '以下实例你需要修改：发件人邮箱（你的QQ邮箱），密码，收件人邮箱（可发给自己）。',
             '发送成功后，登陆收件人邮箱即可查看：',
             '更多内容请参阅：',
             '。'],
 'href': 'https://www.runoob.com/python/python-email.html',
 'image': [],
 'title': 'Python SMTP发送邮件'}{'content': ['Python 标准数据库接口为 Python DB-API，Python DB-API为开发人员提供了数据库应用编程接口。',
             'Python 数据库接口支持非常多的数据库，你可以选择适合你项目的数据库：',
             '你可以访问',
             '查看详细的支持数据库列表。',
             '不同的数据库你需要下载不同的DB '
             'API模块，例如你需要访问Oracle数据库和Mysql数据，你需要下载Oracle和MySQL数据库模块。',
             'DB-API 是一个规范. 它定义了一系列必须的对象和数据库存取方式, '
             '以便为各种各样的底层数据库系统和多种多样的数据库接口程序提供一致的访问接口 。',
             'Python的DB-API，为大多数的数据库实现了接口，使用它连接各数据库后，就可以用相同的方式操作各数据库。 ',
             'Python DB-API使用流程：',
             'MySQLdb 是用于Python链接Mysql数据库的接口，它实现了 Python 数据库 API 规范 V2.0，基于 '
             'MySQL C API 上建立的。',
             '为了用DB-API编写MySQL脚本，必须确保已经安装了MySQL。复制以下代码，并执行：',
             '如果执行后的输出结果如下所示，意味着你没有安装 MySQLdb 模块：',
             '安装MySQLdb，请访问 ',
             ' ，(Linux平台可以访问：',
             ')从这里可选择适合您的平台的安装包，分为预编译的二进制文件和源代码安装包。',
             '如果您选择二进制文件发行版本的话，安装过程基本安装提示即可完成。如果从源代码进行安装的话，则需要切换到MySQLdb发行版本的顶级目录，并键入下列命令:',
             '请确保您有root权限来安装上述模块。',
             '连接数据库前，请先确认以下事项：',
             '以下实例链接Mysql的TESTDB数据库：',
             '执行以上脚本输出结果如下：',
             '如果数据库连接存在我们可以使用execute()方法来为数据库创建表，如下所示创建表EMPLOYEE：',
             '以下实例使用执行 SQL INSERT 语句向表 EMPLOYEE 插入记录：',
             '以上例子也可以写成如下形式：',
             '以下代码使用变量向SQL语句中传递参数:',
             'Python查询Mysql使用 fetchone() 方法获取单条数据, 使用fetchall() 方法获取多条数据。',
             '查询EMPLOYEE表中salary（工资）字段大于1000的所有数据：',
             '以上脚本执行结果如下：',
             "更新操作用于更新数据表的的数据，以下实例将 EMPLOYEE 表中的 SEX 字段为 'M' 的 AGE 字段递增 1：",
             '删除操作用于删除数据表中的数据，以下实例演示了删除数据表 EMPLOYEE 中 AGE 大于 20 的所有数据：',
             '事务机制可以确保数据一致性。',
             '事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。',
             'Python DB API 2.0 的事务提供了两个方法 commit 或 rollback。',
             '对于支持事务的数据库， 在Python数据库编程中，当游标建立之时，就自动开始了一个隐形的数据库事务。',
             'commit()方法游标的所有更新操作，rollback（）方法回滚当前游标的所有操作。每一个方法都开始了一个新的事务。',
             'DB API中定义了一些数据库操作的错误及异常，下表列出了这些错误和异常:'],
 'href': 'https://www.runoob.com/python/python-mysql.html',
 'image': [],
 'title': 'Python 操作 MySQL 数据库'}{'content': ['本文为大家推荐几款款不错的 ',
             '（集成开发环境），比较推荐  PyCharm，当然你可以根据自己的喜好来选择适合自己的 Python IDE。',
             'PyCharm 是由 JetBrains 打造的一款 Python IDE。',
             'PyCharm 具备一般 ',
             ' 的功能，比如：调试、语法高亮、项目管理、代码跳转、智能提示、自动完成、单元测试、版本控制等。',
             '另外，PyCharm 还提供了一些很好的功能用于 Django 开发，同时支持 Google App '
             'Engine，更酷的是，PyCharm 支持 IronPython。',
             'PyCharm 官方下载地址：',
             '',
             '效果图查看： ',
             'Sublime Text 具有漂亮的用户界面和强大的功能，例如代码缩略图，Python '
             '的插件，代码段等。还可自定义键绑定，菜单和工具栏。',
             'Sublime Text 的主要功能包括：拼写检查，书签，完整的 Python API ， Goto '
             '功能，即时项目切换，多选择，多窗口等等。',
             'Sublime Text 是一个跨平台的编辑器，同时支持 Windows、Linux、Mac OS X等操作系统。',
             '',
             '使用Sublime Text 2的插件扩展功能，你可以轻松的打造一款不错的 Python '
             'IDE，以下推荐几款插件（你可以找到更多）：',
             'Eclipse可以在它的官方网站',
             '找到并下载，通常我们可以选择适合自己的Eclipse版本，比如Eclipse '
             'Classic。下载完成后解压到到你想安装的目录中即可。',
             '当然在执行Eclipse之前，你必须确认安装了Java运行环境,即必须安装JRE或JDK，你可以到（',
             '）找到JRE下载并安装。',
             '运行Eclipse之后，选择help-->Install new Software，如下图所示。',
             '点击Add，添加pydev的安装地址：',
             '，如下图所示。',
             '完成后点击"ok"，接着点击PyDev的"+"，展开PyDev的节点，要等一小段时间，让它从网上获取PyDev的相关套件，当完成后会多出PyDev的相关套件在子节点里，勾选它们然后按next进行安装。如下图所示。',
             '安装完成后，重启Eclipse即可',
             '安装完成后，还需要设置一下PyDev，选择Window -> '
             'Preferences来设置PyDev。设置Python的路径，从Pydev的Interpreter - '
             'Python页面选择New',
             '会弹出一个窗口让你选择Python的安装位置，选择你安装Python的所在位置。',
             '完成之后PyDev就设置完成，可以开始使用。',
             '安装好Eclipse+PyDev以后，我们就可以开始使用它来开发项目了。首先要创建一个项目，选择File -> New '
             '->Pydev Project',
             '会弹出一个新窗口，填写Project Name，以及项目保存地址，然后点击next完成项目的创建。',
             '光有项目是无法执行的，接着必须创建新的Pydev Moudle，选择File -> New -> Pydev Module',
             '在弹出的窗口中选择文件存放位置以及Moudle '
             'Name，注意Name不用加.py，它会自动帮助我们添加。然后点击Finish完成创建。',
             '输入"hello world"的代码。',
             '程序写完后，我们可以开始执行程序,在上方的工具栏上面找到执行的按钮。',
             '之后会弹出一个让你选择执行方式的窗口，通常我们选择Python Run，开始执行程序。',
             '推荐10 款最好的 Python IDE：',
             '当然还有非常多很棒的 Python IDE，你可以自由的选择，更多 Python IDE 请参阅：'],
 'href': 'https://www.runoob.com/python/python-ide.html',
 'image': ['//www.runoob.com/wp-content/uploads/2014/06/pycharm_ui_darcula.png'],
 'title': 'Python IDE'}{'content': ['CGI 目前由 NCSA 维护，NCSA 定义 CGI 如下：',
             'CGI(Common Gateway Interface)，通用网关接口，它是一段程序，运行在服务器上如：HTTP '
             '服务器，提供同客户端 HTML 页面的接口。',
             '为了更好的了解 CGI 是如何工作的，我们可以从在网页上点击一个链接或 URL 的流程：',
             'CGI 程序可以是 Python 脚本，PERL 脚本，SHELL 脚本，C 或者 C++ 程序等。',
             '在你进行 CGI 编程前，确保您的 Web 服务器支持 CGI 及已经配置了 CGI 的处理程序。',
             'Apache 支持 CGI 配置：',
             '设置好CGI目录：',
             '所有的HTTP服务器执行 CGI 程序都保存在一个预先配置的目录。这个目录被称为 CGI 目录，并按照惯例，它被命名为 '
             '/var/www/cgi-bin 目录。',
             'CGI 文件的扩展名为 ',
             '，python 也可以使用 ',
             ' 扩展名。',
             '默认情况下，Linux 服务器配置运行的 cgi-bin 目录中为 /var/www。',
             '如果你想指定其他运行 CGI 脚本的目录，可以修改 httpd.conf 配置文件，如下所示：',
             '在 AddHandler 中添加 .py 后缀，这样我们就可以访问 .py 结尾的 python 脚本文件：',
             '我们使用 Python 创建第一个 CGI 程序，文件名为 hello.py，文件位于 /var/www/cgi-bin '
             '目录中，内容如下：',
             '文件保存后修改 hello.py，修改文件权限为 755：',
             '以上程序在浏览器访问 ',
             ' 显示结果如下：',
             '',
             '这个的hello.py脚本是一个简单的Python脚本，脚本第一行的输出内容"Content-type:text/html"发送到浏览器并告知浏览器显示的内容类型为"text/html"。',
             '用 print 输出一个空行用于告诉服务器结束头部信息。',
             'hello.py文件内容中的" '
             'Content-type:text/html"即为HTTP头部的一部分，它会发送给浏览器告诉浏览器文件的内容类型。',
             'HTTP头部的格式如下：',
             '例如：',
             '以下表格介绍了CGI程序中HTTP头部经常使用的信息：',
             '所有的CGI程序都接收以下的环境变量，这些变量在CGI程序中发挥了重要的作用：',
             '以下是一个简单的CGI脚本输出CGI的环境变量：',
             '将以上点保存为 test.py ,并修改文件权限为 755，执行结果如下：',
             '浏览器客户端通过两种方法向服务器传递信息，这两种方法就是 GET 方法和 POST 方法。',
             'GET方法发送编码后的用户信息到服务端，数据信息包含在请求页面的URL上，以"?"号分割, 如下所示：',
             '以下是一个简单的URL，使用GET方法向hello_get.py程序发送两个参数：',
             '以下为hello_get.py文件的代码：',
             '文件保存后修改 hello_get.py，修改文件权限为 755：',
             '浏览器请求输出结果：',
             '以下是一个通过HTML的表单使用GET方法向服务器发送两个数据，提交的服务器脚本同样是hello_get.py文件，hello_get.html '
             '代码如下：',
             '默认情况下 cgi-bin 目录只能存放脚本文件，我们将 hello_get.html 存储在 test 目录下，修改文件权限为 '
             '755：',
             'Gif 演示如下所示：',
             '使用POST方法向服务器传递数据是更安全可靠的，像一些敏感信息如用户密码等需要使用POST传输数据。',
             '以下同样是hello_get.py ，它也可以处理浏览器提交的POST表单数据:',
             '以下为表单通过POST方法（',
             '）向服务器脚本 hello_get.py 提交数据:',
             'Gif 演示如下所示：',
             'checkbox用于提交一个或者多个选项数据，HTML代码如下：',
             '以下为 checkbox.py 文件的代码：',
             '修改 checkbox.py 权限：',
             '浏览器访问 Gif 演示图：',
             'Radio 只向服务器传递一个数据，HTML代码如下：',
             'radiobutton.py 脚本代码如下：',
             '修改 radiobutton.py 权限：',
             '浏览器访问 Gif 演示图：',
             'Textarea 向服务器传递多行数据，HTML代码如下：',
             'textarea.py 脚本代码如下：',
             '修改 textarea.py 权限：',
             '浏览器访问 Gif 演示图：',
             'HTML 下拉框代码如下：',
             'dropdown.py 脚本代码如下所示：',
             '修改 dropdown.py 权限：',
             '浏览器访问 Gif 演示图：',
             '在 http 协议一个很大的缺点就是不对用户身份的进行判断，这样给编程人员带来很大的不便，而 cookie '
             '功能的出现弥补了这个不足。',
             ' cookie 就是在客户访问脚本的同时，通过客户的浏览器，在客户硬盘上写入纪录数据 '
             '，当下次客户访问脚本时取回数据信息，从而达到身份判别的功能，cookie 常用在身份校验中。',
             'http cookie的发送是通过http头部来实现的，他早于文件的传递，头部set-cookie的语法如下：',
             'Cookie的设置非常简单，cookie会在http头部单独发送。以下实例在cookie中设置了name 和 expires：',
             '将以上代码保存到 cookie_set.py，并修改 cookie_set.py 权限：',
             '以上实例使用了 Set-Cookie '
             '头信息来设置Cookie信息，可选项中设置了Cookie的其他属性，如过期时间Expires，域名Domain，路径Path。这些信息设置在 '
             '"Content-type:text/html"之前。',
             'Cookie信息检索页非常简单，Cookie信息存储在CGI的环境变量HTTP_COOKIE中，存储格式如下：',
             '以下是一个简单的CGI检索cookie信息的程序：',
             '将以上代码保存到 cookie_get.py，并修改 cookie_get.py 权限：',
             '以上 cookie 设置颜色 Gif 如下所示：',
             'HTML设置上传文件的表单需要设置 ',
             ' 属性为 ',
             '，代码如下所示：',
             'save_file.py脚本文件代码如下：',
             '将以上代码保存到 save_file.py，并修改 save_file.py 权限：',
             '以上 cookie 设置颜色 Gif 如下所示：',
             '如果你使用的系统是Unix/Linux，你必须替换文件分隔符，在window下只需要使用open()语句即可：',
             '我们先在当前目录下创建 foo.txt 文件，用于程序的下载。',
             '文件下载通过设置HTTP头信息来实现，功能代码如下：'],
 'href': 'https://www.runoob.com/python/python-cgi.html',
 'image': [],
 'title': 'Python CGI 编程'}{'content': ['正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。',
             'Python 自1.5版本起增加了re 模块，它提供 Perl 风格的正则表达式模式。',
             're 模块使 Python 语言拥有全部的正则表达式功能。 ',
             'compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。 ',
             're 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。',
             '本章节主要介绍Python中常用的正则表达式处理函数。',
             're.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。',
             '：',
             '函数参数说明：',
             '匹配成功re.match方法返回一个匹配的对象，否则返回None。',
             '我们可以使用group(num) 或  groups() 匹配对象函数来获取匹配表达式。',
             '以上实例运行输出结果为：',
             '以上实例执行结果如下：',
             're.search 扫描整个字符串并返回第一个成功的匹配。',
             '函数语法：',
             '函数参数说明：',
             '匹配成功re.search方法返回一个匹配的对象，否则返回None。',
             '我们可以使用group(num) 或  groups() 匹配对象函数来获取匹配表达式。',
             '以上实例运行输出结果为：',
             're.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。',
             'Python 的 re 模块提供了re.sub用于替换字符串中的匹配项。',
             '语法：',
             '参数：',
             '以下实例中将字符串中的匹配的数字乘以 2：',
             '执行输出结果为：',
             'compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() '
             '这两个函数使用。',
             '语法格式为：',
             '参数：',
             '在上面，当匹配成功时返回一个 Match 对象，其中：',
             '再看看一个例子：',
             '在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。',
             ' match 和 search  是匹配一次 findall 匹配所有。',
             '语法格式为：',
             '参数：',
             '查找字符串中的所有数字：',
             '输出结果：',
             '和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。',
             '参数：',
             '输出结果：',
             'split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：',
             '参数：',
             're.compile() 返回 RegexObject 对象。',
             'group() 返回被 RE 匹配的字符串。',
             '正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。多个标志可以通过按位 OR(|) '
             '它们来指定。如 re.I | re.M 被设置成 I 和 M 标志：',
             '模式字符串使用特殊的语法来表示一个正则表达式：',
             '字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。',
             '多数字母和数字前加一个反斜杠时会拥有不同的含义。',
             '标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。',
             '反斜杠本身需要使用反斜杠转义。',
             "由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示它们。模式元素(如 r'\\t'，等价于 "
             "'\\\\t')匹配相应的特殊字符。",
             '下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。'],
 'href': 'https://www.runoob.com/python/python-reg-expressions.html',
 'image': [],
 'title': 'Python 正则表达式'}{'content': ['XML 指可扩展标记语言（e',
             'tensible ',
             'arkup ',
             'anguage）。你可以通过本站学习 ',
             '',
             'XML 被设计用来传输和存储数据。',
             'XML 是一套定义语义标记的规则，这些标记将文档分成许多部件并对这些部件加以标识。',
             '它也是元标记语言，即定义了用于定义其他与特定领域有关的、语义的、结构化的标记语言的句法语言。',
             '常见的 XML 编程接口有 DOM 和 SAX，这两种接口处理 XML 文件的方式不同，当然使用场合也不同。',
             'Python 有三种方法解析 XML，SAX，DOM，以及 ElementTree:',
             'Python 标准库包含 SAX 解析器，SAX '
             '用事件驱动模型，通过在解析XML的过程中触发一个个的事件并调用用户定义的回调函数来处理XML文件。',
             '将 XML 数据在内存中解析成一个树，通过对树的操作来操作XML。',
             'ElementTree就像一个轻量级的DOM，具有方便友好的API。代码可用性好，速度快，消耗内存少。',
             '因DOM需要将XML数据映射到内存中的树，一是比较慢，二是比较耗内存，而SAX流式读取XML文件，比较快，占用内存少，但需要用户实现回调函数（handler）。',
             '本章节使用到的 XML 实例文件 movies.xml 内容如下：',
             'SAX是一种基于事件驱动的 API。',
             '利用SAX解析XML文档牵涉到两个部分: ',
             '和',
             '。',
             '解析器负责读取XML文档，并向事件处理器发送事件，如元素开始跟元素结束事件。',
             '而事件处理器则负责对事件作出响应，对传递的XML数据进行处理。'],
 'href': 'https://www.runoob.com/python/python-xml.html',
 'image': [],
 'title': 'Python XML 解析'}{'content': ['使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾:',
             '类的帮助信息可以通过ClassName.__doc__查看。',
             'class_suite 由类成员，方法，数据属性组成。',
             '以下是一个简单的 Python 类的例子:',
             '类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的',
             ', 按照惯例它的名称是 self。',
             '以上实例执行结果为：',
             '从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 ',
             ' 则指向类。',
             'self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:',
             '以上实例执行结果为：',
             '实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。',
             '以下使用类的名称 Employee 来实例化，并通过 __init__ 方法接收参数。',
             '您可以使用点号 ',
             ' 来访问对象的属性。使用如下类的名称访问类变量:',
             '完整实例：',
             '执行以上代码输出结果如下：',
             '你可以添加，删除，修改类的属性，如下所示：',
             '你也可以使用以下函数的方式来访问属性：',
             'Python内置类属性调用实例如下：',
             '执行以上代码输出结果如下：',
             'Python 使用了引用计数这一简单技术来跟踪和回收垃圾。',
             '一个内部跟踪变量，称为一个引用计数器。',
             '当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， '
             '它被垃圾回收。但是回收不是"立即"的，由解释器在适当的时机，将垃圾对象占用的内存空间回收。',
             '垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python '
             '的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， '
             '垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， '
             '试图清理所有未引用的循环。 ',
             '析构函数 __del__ ，__del__在对象销毁的时候被调用，当对象不再被使用时，__del__方法运行：',
             '以上实例运行结果如下：',
             '',
             '通常你需要在单独的文件中定义一个类，',
             '面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。',
             '通过继承创建的新类称为',
             '或',
             '，被继承的类称为',
             '、',
             '或',
             '。',
             '   ',
             '在python中继承中的一些特点：',
             '如果在继承元组中列了一个以上的类，那么它就被称作"多重继承" 。',
             '派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：',
             '以上代码执行结果如下：',
             '你可以继承多个类',
             '你可以使用issubclass()或者isinstance()方法来检测。',
             '如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：',
             '实例：',
             '执行以上代码输出结果如下：',
             '下表列出了一些通用的功能，你可以在自己的类重写：',
             'Python同样支持运算符重载，实例如下：',
             '以上代码执行结果如下所示:',
             '：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 ',
             '。',
             '在类的内部，使用 ',
             ' 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 self,且为第一个参数',
             '',
             '：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 ',
             '',
             'Python 通过改变名称来包含类名:',
             'Python不允许实例化的类访问私有数据，但你可以使用 ',
             '（ ',
             ' ）访问属性，参考以下实例：',
             '执行以上代码，执行结果如下：'],
 'href': 'https://www.runoob.com/python/python-object.html',
 'image': [],
 'title': 'Python 面向对象'}{'content': ['序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - '
             '它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。',
             ' Python有6个序列的内置类型，但最常见的是列表和元组。',
             '序列都可以进行的操作包括索引，切片，加，乘，检查成员。',
             '此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。',
             '列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。',
             '列表的数据项不需要具有相同的类型',
             '创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：',
             '与字符串的索引一样，列表索引从0开始。列表可以进行截取、组合等。',
             '使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示：',
             '以上实例输出结果：',
             '你可以对列表的数据项进行修改或更新，你也可以使用append()方法来添加列表项，如下所示：',
             '我们会在接下来的章节讨论append()方法的使用',
             '以上实例输出结果：',
             '可以使用 del 语句来删除列表的元素，如下实例：',
             '以上实例输出结果：',
             '我们会在接下来的章节讨论remove()方法的使用',
             '列表对 + 和  * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。',
             '如下所示：',
             'Python 的列表截取实例如下：',
             '描述：',
             'Python包含以下函数:',
             'Python包含以下方法:'],
 'href': 'https://www.runoob.com/python/python-lists.html',
 'image': [],
 'title': 'Python 列表(List)'}{'content': ['python提供了两个非常重要的功能来处理python程序在运行中出现的异常和错误。你可以使用该功能来调试python程序。',
             '异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。',
             '一般情况下，在Python无法正常处理程序时就会发生一个异常。',
             '异常是Python对象，表示一个错误。',
             '当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。',
             '捕捉异常可以使用try/except语句。',
             'try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。',
             '如果你不想在异常发生时结束你的程序，只需在try里捕获它。',
             '语法：',
             '以下为简单的',
             '的语法：',
             'try的工作原理是，当开始一个try语句后，python就在当前程序的上下文中作标记，这样当异常出现时就可以回到这里，try子句先执行，接下来会发生什么依赖于执行时是否出现异常。',
             '下面是简单的例子，它打开一个文件，在该文件中的内容写入内容，且并未发生异常：',
             '以上程序输出结果：',
             '下面是简单的例子，它打开一个文件，在该文件中的内容写入内容，但文件没有写入权限，发生了异常：',
             '在执行代码前为了测试方便，我们可以先去掉 testfile 文件的写权限，命令如下：',
             '再执行以上代码：',
             '你可以不带任何异常类型使用except，如下实例：',
             '以上方式try-except语句捕获所有发生的异常。但这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息。因为它捕获所有的异常。 ',
             '你也可以使用相同的except语句来处理多个异常信息，如下所示：',
             'try-finally 语句无论是否发生异常都将执行最后的代码。',
             '如果打开的文件没有可写权限，输出如下所示：',
             '同样的例子也可以写成如下方式：',
             '当在try块中抛出一个异常，立即执行finally块代码。',
             'finally块中的所有语句执行后，异常被再次触发，并执行except块代码。',
             '参数的内容不同于异常。',
             '一个异常可以带上参数，可作为输出的异常信息参数。',
             '你可以通过except语句来捕获异常的参数，如下所示：',
             '变量接收的异常值通常包含在异常的语句中。在元组的表单中变量可以接收一个或者多个值。',
             '元组通常包含错误字符串，错误数字，错误位置。',
             '以下为单个异常的实例：',
             '以上程序执行结果如下：',
             '我们可以使用raise语句自己触发异常',
             'raise语法格式如下：',
             '语句中 Exception 是异常的类型（例如，NameError）参数标准异常中任一种，args 是自已提供的异常参数。',
             '最后一个参数是可选的（在实践中很少使用），如果存在，是跟踪异常对象。',
             '一个异常可以是一个字符串，类或对象。 Python的内核提供的异常，大多数都是实例化的类，这是一个类的实例的参数。',
             '定义一个异常非常简单，如下所示：',
             '为了能够捕获异常，"except"语句必须有用相同的异常来抛出类对象或者字符串。',
             '例如我们捕获以上异常，"except"语句如下所示：',
             '执行以上代码，输出结果为：',
             '通过创建一个新的异常类，程序可以命名它们自己的异常。异常应该是典型的继承自Exception类，通过直接或间接的方式。',
             '以下为与RuntimeError相关的实例,实例中创建了一个类，基类为RuntimeError，用于在异常触发时输出更多的信息。',
             '在try语句块中，用户自定义的异常后执行except块语句，变量 e 是用于创建Networkerror类的实例。',
             '在你定义以上类后，你可以触发该异常，如下所示：'],
 'href': 'https://www.runoob.com/python/python-exceptions.html',
 'image': [],
 'title': 'Python 异常处理'}{'content': ['本章只讲述所有基本的 I/O 函数，更多函数请参考Python标准文档。',
             '最简单的输出方法是用print语句，你可以给它传递零个或多个用逗号隔开的表达式。此函数把你传递的表达式转换成一个字符串表达式，并将结果写到标准输出如下：',
             '你的标准屏幕上会产生以下结果：',
             'Python提供了两个内置函数从标准输入读入一行文本，默认的标准输入是键盘。如下：',
             'raw_input([prompt]) 函数从标准输入读取一个行，并返回一个字符串（去掉结尾的换行符）：',
             '这将提示你输入任意字符串，然后在屏幕上显示相同的字符串。当我输入"Hello Python！"，它的输出如下：',
             '',
             ' 函数和 ',
             ' 函数基本类似，但是 input 可以接收一个Python表达式作为输入，并将运算结果返回。',
             '这会产生如下的对应着输入的结果：',
             '现在，您已经可以向标准输入和输出进行读写。现在，来看看怎么读写实际的数据文件。',
             'Python 提供了必要的函数和方法进行默认情况下的文件基本操作。你可以用 ',
             ' 对象做大部分的文件操作。',
             '你必须先用Python内置的open()函数打开一个文件，创建一个file对象，相关的方法才可以调用它进行读写。',
             '语法：',
             '各个参数的细节如下：',
             '不同模式打开文件的完全列表：',
             '下图很好的总结了这几种模式：',
             '一个文件被打开后，你有一个file对象，你可以得到有关该文件的各种信息。',
             '以下是和file对象相关的所有属性的列表：',
             '如下实例：',
             '以上实例输出结果：',
             'File 对象的 close（）方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。',
             '当一个文件对象的引用被重新指定给另一个文件时，Python 会关闭之前的文件。用 close（）方法关闭文件是一个很好的习惯。',
             '语法：',
             '例子：',
             '以上实例输出结果：',
             '读写文件：',
             'file对象提供了一系列方法，能让我们的文件访问更轻松。来看看如何使用read()和write()方法来读取和写入文件。',
             'write()方法可将任何字符串写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。',
             "write()方法不会在字符串的结尾添加换行符('\\n')：",
             '语法：',
             '在这里，被传递的参数是要写入到已打开文件的内容。',
             '例子：',
             '上述方法会创建foo.txt文件，并将收到的内容写入该文件，并最终关闭文件。如果你打开这个文件，将看到以下内容:',
             'read（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。',
             '语法：',
             '在这里，被传递的参数是要从已打开文件中读取的字节计数。该方法从文件的开头开始读入，如果没有传入count，它会尝试尽可能多地读取更多的内容，很可能是直到文件的末尾。',
             '这里我们用到以上创建的 foo.txt 文件。',
             '以上实例输出结果：',
             '文件位置：',
             'tell()方法告诉你文件内的当前位置, 换句话说，下一次的读写会发生在文件开头这么多字节之后。',
             'seek（offset '
             '[,from]）方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。',
             '如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。如果设为1，则使用当前的位置作为参考位置。如果它被设为2，那么该文件的末尾将作为参考位置。',
             '例子：',
             '就用我们上面创建的文件foo.txt。',
             '以上实例输出结果：',
             'Python的os模块提供了帮你执行文件处理操作的方法，比如重命名和删除文件。',
             '要使用这个模块，你必须先导入它，然后才可以调用相关的各种功能。',
             'rename()方法：',
             'rename()方法需要两个参数，当前的文件名和新文件名。',
             '语法：',
             '例子：',
             '下例将重命名一个已经存在的文件test1.txt。',
             '你可以用remove()方法删除文件，需要提供要删除的文件名作为参数。',
             '语法：',
             '例子：',
             '下例将删除一个已经存在的文件test2.txt。',
             '所有文件都包含在各个不同的目录下，不过Python也能轻松处理。os模块有许多方法能帮你创建，删除和更改目录。',
             '可以使用os模块的mkdir()方法在当前目录下创建新的目录们。你需要提供一个包含了要创建的目录名称的参数。',
             '语法：',
             '例子：',
             '下例将在当前目录下创建一个新目录test。',
             '可以用chdir()方法来改变当前的目录。chdir()方法需要的一个参数是你想设成当前目录的目录名称。',
             '语法：',
             '例子：',
             '下例将进入"/home/newdir"目录。',
             'getcwd()方法：',
             'getcwd()方法显示当前的工作目录。',
             '语法：',
             '例子：',
             '下例给出当前目录：',
             'rmdir()方法删除目录，目录名称以参数传递。',
             '在删除这个目录之前，它的所有内容应该先被清除。',
             '语法：',
             '例子：',
             '以下是删除" /tmp/test"目录的例子。目录的完全合规的名称必须被给出，否则会在当前目录下搜索该目录。',
             'File 对象和 OS 对象提供了很多文件与目录的操作方法，可以通过点击下面链接查看详情：'],
 'href': 'https://www.runoob.com/python/python-files-io.html',
 'image': [],
 'title': 'Python 文件I/O'}{'content': ['Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python '
             '对象定义和Python语句。',
             '模块让你能够有逻辑地组织你的 Python 代码段。',
             '把相关的代码分配到一个模块里能让你的代码更好用，更易懂。',
             '模块能定义函数，类和变量，模块里也能包含可执行的代码。',
             '下例是个简单的模块 support.py：',
             '模块定义好后，我们可以使用 import 语句来引入模块，语法如下：',
             '比如要引用模块 math，就可以在文件最开始的地方用 ',
             ' 来引入。在调用 math 模块中的函数时，必须这样引用：',
             '当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。',
             '搜索路径是一个解释器会先进行搜索的所有目录的列表。如想要导入模块 support.py，需要把命令放在脚本的顶端：',
             '以上实例输出结果：',
             '一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。',
             'Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中。语法如下：',
             '例如，要导入模块 fib 的 fibonacci 函数，使用如下语句：',
             '这个声明不会把整个 fib 模块导入到当前的命名空间中，它只会将 fib 里的 fibonacci '
             '单个引入到执行这个声明的模块的全局符号表。',
             '把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：',
             '这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。',
             '例如我们想一次性引入 math 模块中所有的东西，语句如下：',
             '当你导入一个模块，Python 解析器对模块位置的搜索顺序是：',
             '模块搜索路径存储在 system 模块的 sys.path '
             '变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。',
             '作为环境变量，PYTHONPATH 由装在一个列表里的许多目录组成。PYTHONPATH 的语法和 shell 变量 PATH '
             '的一样。',
             '在 Windows 系统，典型的 PYTHONPATH 如下：',
             '在 UNIX 系统，典型的 PYTHONPATH 如下：',
             '变量是拥有匹配对象的名字（标识符）。命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典。',
             '一个 Python '
             '表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。',
             '每个函数都有自己的命名空间。类的方法的作用域规则和通常函数的一样。',
             'Python 会智能地猜测一个变量是局部的还是全局的，它假设任何在函数内赋值的变量都是局部的。',
             '因此，如果要给函数内的全局变量赋值，必须使用 global 语句。',
             'global VarName 的表达式会告诉 Python， VarName 是一个全局变量，这样 Python '
             '就不会在局部命名空间里寻找这个变量了。',
             '例如，我们在全局命名空间里定义一个变量 Money。我们再在函数内给变量 Money 赋值，然后 Python 会假定 '
             'Money 是一个局部变量。然而，我们并没有在访问前声明一个局部变量 Money，结果就是会出现一个 '
             'UnboundLocalError 的错误。取消 global 语句前的注释符就能解决这个问题。',
             'dir() 函数一个排好序的字符串列表，内容是一个模块里定义过的名字。',
             '返回的列表容纳了在一个模块里定义的所有模块，变量和函数。如下一个简单的实例：',
             '以上实例输出结果：',
             '在这里，特殊字符串变量__name__指向模块的名字，__file__指向该模块的导入文件名。',
             '根据调用地方的不同，globals() 和 locals() 函数可被用来返回全局和局部命名空间里的名字。',
             '如果在函数内部调用 locals()，返回的是所有能在该函数里访问的命名。',
             '如果在函数内部调用 globals()，返回的是所有在该函数里能访问的全局名字。',
             '两个函数的返回类型都是字典。所以名字们能用 keys() 函数摘取。',
             '当一个模块被导入到一个脚本，模块顶层部分的代码只会被执行一次。',
             '因此，如果你想重新执行模块里顶层部分的代码，可以用 reload() 函数。该函数会重新导入之前导入过的模块。语法如下：',
             '在这里，module_name要直接放模块的名字，而不是一个字符串形式。比如想重载 hello 模块，如下：',
             '包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。',
             '简单来说，包就是文件夹，但该文件夹下必须存在 __init__.py 文件, 该文件的内容可以为空。',
             ' 用于标识当前文件夹是一个包。',
             '考虑一个在 ',
             ' 目录下的 ',
             ' 文件，test.py 为测试调用包的代码，目录结构如下：',
             '现在，在 ',
             ' 目录下创建 ',
             '：',
             '然后我们在 ',
             ' ',
             '下创建 test.py 来调用 ',
             ' 包',
             '以上实例输出结果：',
             '如上，为了举例，我们只在每个文件里放置了一个函数，但其实你可以放置许多函数。你也可以在这些文件里定义Python的类，然后为这些类建一个包。'],
 'href': 'https://www.runoob.com/python/python-modules.html',
 'image': [],
 'title': 'Python 模块'}{'content': ['函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。',
             '函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。',
             '你可以定义一个由自己想要功能的函数，以下是简单的规则：',
             '默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。',
             '以下为一个简单的Python函数，它将一个字符串作为传入参数，再打印到标准显示设备上。',
             '定义一个函数只给了函数一个名称，指定了函数里包含的参数，和代码块结构。',
             '这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从Python提示符执行。',
             '如下实例调用了printme（）函数：',
             '以上实例输出结果：',
             '在 python 中，类型属于对象，变量是没有类型的：',
             '以上代码中，',
             ' 是 List 类型，',
             ' 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是 List 类型对象，也可以指向 '
             'String 类型对象。',
             '在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict '
             '等则是可以修改的对象。',
             'python 函数的参数传递：',
             'python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。',
             '实例中有 int 对象 2，指向它的变量是 b，在传递给 ChangeInt 函数时，按传值的方式复制了变量 b，a 和 b '
             '都指向了同一个 Int 对象，在 a=10 时，则新生成一个 int 值对象 10，并让 a 指向它。',
             '实例中传入函数的和在末尾添加新内容的对象用的是同一个引用，故输出结果如下：',
             '以下是调用函数时可使用的正式参数类型：',
             '必备参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。',
             '调用printme()函数，你必须传入一个参数，不然会出现语法错误：',
             '以上实例输出结果：',
             '关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。',
             '使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。',
             '以下实例在函数 printme() 调用时使用参数名：',
             '以上实例输出结果：',
             '下例能将关键字参数顺序不重要展示得更清楚：',
             '以上实例输出结果：',
             '调用函数时，默认参数的值如果没有传入，则被认为是默认值。下例会打印默认的age，如果age没有被传入：',
             '以上实例输出结果：',
             '你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名。基本语法如下：',
             '加了星号（*）的变量名会存放所有未命名的变量参数。不定长参数实例如下：',
             '以上实例输出结果：',
             'python 使用 lambda 来创建匿名函数。',
             'lambda函数的语法只包含一个语句，如下：',
             '如下实例：',
             '以上实例输出结果：',
             'return语句[表达式]退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。之前的例子都没有示范如何返回数值，下例便告诉你怎么做：',
             '以上实例输出结果：',
             '一个程序的所有的变量并不是在哪个位置都可以访问的。访问权限决定于这个变量是在哪里赋值的。'],
 'href': 'https://www.runoob.com/python/python-functions.html',
 'image': [],
 'title': 'Python 函数'}{'content': ['Python 程序能用很多方式处理日期和时间，转换日期格式是一个常见的功能。',
             'Python 提供了一个 time 和 calendar 模块可以用于格式化日期和时间。',
             '时间间隔是以秒为单位的浮点小数。',
             '每个时间戳都以自从1970年1月1日午夜（历元）经过了多长时间来表示。',
             'Python 的 time 模块下有很多函数可以转换常见日期格式。如函数time.time()用于获取当前时间戳, 如下实例:',
             '',
             '以上实例输出结果：',
             '时间戳单位最适于做日期运算。但是1970年之前的日期就无法以此表示了。太遥远的日期也不行，UNIX和Windows只支持到2038年。',
             '很多Python函数用一个元组装起来的9组数字处理时间:',
             '上述也就是struct_time元组。这种结构具有如下属性：',
             '从返回浮点数的时间戳方式向时间元组转换，只要将浮点数传递给如localtime之类的函数。',
             '以上实例输出结果：',
             '你可以根据需求选取各种格式，但是最简单的获取可读的时间模式的函数是asctime():',
             '以上实例输出结果：',
             '我们可以使用 time 模块的 strftime 方法来格式化日期，：',
             '实例演示：',
             '以上实例输出结果：',
             'python中时间日期格式化符号：',
             'Calendar模块有很广泛的方法用来处理年历和月历，例如打印某月的月历：',
             '以上实例输出结果：',
             'Time 模块包含了以下内置函数，既有时间处理的，也有转换时间格式的：',
             'Time模块包含了以下2个非常重要的属性：',
             '此模块的函数都是日历相关的，例如打印某月的字符月历。',
             '星期一是默认的每周第一天，星期天是默认的最后一天。更改设置需调用calendar.setfirstweekday()函数。模块包含了以下内置函数：',
             '在Python中，其他处理日期和时间的模块还有：'],
 'href': 'https://www.runoob.com/python/python-date-time.html',
 'image': [],
 'title': 'Python 日期和时间'}{'content': ['Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。',
             'Python 本身也是由诸多其他语言发展而来的,这包括 '
             'ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。',
             '像 Perl 语言一样，Python 源代码同样遵循 GPL(GNU General Public License)协议。',
             '现在 Python 是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展。',
             'Python 2.7 被确定为最后一个 Python 2.x 版本，它除了支持 Python 2.x 语法外，还支持部分 '
             'Python 3.1 语法。'],
 'href': 'https://www.runoob.com/python/python-intro.html',
 'image': [],
 'title': 'Python 简介'}{'content': [' 本教程适合想从零开始学习 Python 编程语言的开发人员。当然本教程也会对一些模块进行深入，让你更好的了解 Python '
             '的应用。',
             '本教程主要针对 Python 2.x 版本的学习，如果你使用的是 Python 3.x 版本请移步至',
             '。',
             '本教程所有实例基于 Python2.7。',
             ' 在继续本教程之前，你应该了解一些基本的计算机编程术语。如果你学习过 PHP，ASP 等编程语言，将有助于你更快的了解 '
             'Python 编程。',
             ' 对于大多数程序语言，第一个入门编程代码便是 "Hello World！"，以下代码为使用 Python 输出 "Hello '
             'World！"：',
             'Python 3.0+ 版本已经把 print 作为一个内置函数，输出 "Hello World！" 代码如下：',
             ' ',
             ' ',
             ' ',
             ' '],
 'href': 'https://www.runoob.com/python/python-tutorial.html',
 'image': [],
 'title': 'Python 基础教程'}{'content': ['Python最新源码，二进制文档，新闻资讯等可以在Python的官网查看到：',
             'Python官网：',
             '你可以在以下链接中下载 Python 的文档，你可以下载 HTML、PDF 和 PostScript 等格式的文档。',
             'Python文档下载地址：',
             'Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。',
             '您需要下载适用于您使用平台的二进制代码，然后安装Python。',
             '如果您平台的二进制代码是不可用的，你需要使用C编译器手动编译源代码。',
             '编译的源代码，功能上有更多的选择性， 为python安装提供了更多的灵活性。',
             '以下是各个平台安装包的下载地址：',
             '以下为不同平台上安装 Python 的方法：',
             '以下为在 Unix & Linux 平台上安装 Python 的简单步骤：',
             '执行以上操作后，Python 会安装在 /usr/local/bin 目录中，Python 库安装在 '
             '/usr/local/lib/pythonXX，XX 为你使用的 Python 的版本号。',
             '以下为在 Window 平台上安装 Python 的简单步骤：',
             'MAC 系统一般都自带有 Python2.x版本 的环境，你也可以在链接 ',
             ' 上下载最新版安装。',
             '程序和可执行文件可以在许多目录，而这些路径很可能不在操作系统提供可执行文件的搜索路径中。',
             'path(路径)存储在环境变量中，这是由操作系统维护的一个命名的字符串。这些变量包含可用的命令行解释器和其他程序的信息。',
             'Unix或Windows中路径变量为PATH（UNIX区分大小写，Windows不区分大小写）。',
             '在Mac '
             'OS中，安装程序过程中改变了python的安装路径。如果你需要在其他目录引用Python，你必须在path中添加Python目录。',
             '/usr/local/bin/python 是 Python 的安装目录。',
             '在环境变量中添加Python目录：',
             ' 输入 ',
             'C:\\Python 是Python的安装目录。',
             '也可以通过以下方式设置：',
             '',
             '下面几个重要的环境变量，它应用于Python：',
             '有三种方式可以运行Python：',
             '你可以通过命令行窗口进入python并开在交互式解释器中开始编写Python代码。',
             '你可以在Unix，DOS或任何其他提供了命令行或者shell的系统进行python编码工作。',
             '以下为Python命令行参数：',
             '在你的应用程序中通过引入解释器可以在命令行中执行Python脚本，如下所示：',
             '在执行脚本时，请检查脚本是否有可执行权限。',
             'PyCharm 是由 JetBrains 打造的一款 Python IDE，支持 macOS、 Windows、 Linux '
             '系统。',
             'PyCharm 功能 : 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制……',
             'PyCharm 下载地址 : ',
             'PyCharm 安装地址：',
             '继续下一章之前，请确保您的环境已搭建成功。如果你不能够建立正确的环境，那么你就可以从您的系统管理员的帮助。',
             '在以后的章节中给出的例子已在 Python2.7.6 版本测试通过。'],
 'href': 'https://www.runoob.com/python/python-install.html',
 'image': [],
 'title': 'Python 环境搭建'}{'content': ['Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。',
             '可以通过下图来简单了解条件语句的执行过程:',
             '',
             '',
             'Python程序语言指定任何非0和非空（null）值为true，0 或者 null为false。',
             'Python 编程中 if 语句用于控制程序的执行，基本形式为：',
             '其中"判断条件"成立时（非零），则执行后面的语句，而执行内容可以多行，以缩进来区分表示同一范围。',
             'else 为可选语句，当需要在条件不成立时执行内容则可以执行相关语句。',
             'Gif 演示：',
             '具体例子如下：\t',
             '输出结果为：',
             'if 语句的判断条件可以用>（大于）、=（大于等于）、<=（小于等于）来表示其关系。',
             '当判断条件为多个值时，可以使用以下形式：',
             '实例如下：',
             '输出结果为：',
             '由于 python 并不支持 switch 语句，所以多个条件判断，只能用 elif '
             '来实现，如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and '
             '（与）时，表示只有两个条件同时成立的情况下，判断条件才成功。',
             '当if有多个条件时可使用括号来区分判断的先后顺序，括号中的判断优先执行，此外 and 和 or 的优先级低于>（大于）、',
             '你也可以在同一行的位置上使用if条件判断语句，如下实例：',
             '以上代码执行输出结果如下：'],
 'href': 'https://www.runoob.com/python/python-if-statement.html',
 'image': [],
 'title': 'Python 条件语句'}{'content': ['python提供了两个非常重要的功能来处理python程序在运行中出现的异常和错误。你可以使用该功能来调试python程序。',
             '异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。',
             '一般情况下，在Python无法正常处理程序时就会发生一个异常。',
             '异常是Python对象，表示一个错误。',
             '当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。',
             '捕捉异常可以使用try/except语句。',
             'try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。',
             '如果你不想在异常发生时结束你的程序，只需在try里捕获它。',
             '语法：',
             '以下为简单的',
             '的语法：',
             'try的工作原理是，当开始一个try语句后，python就在当前程序的上下文中作标记，这样当异常出现时就可以回到这里，try子句先执行，接下来会发生什么依赖于执行时是否出现异常。',
             '下面是简单的例子，它打开一个文件，在该文件中的内容写入内容，且并未发生异常：',
             '以上程序输出结果：',
             '下面是简单的例子，它打开一个文件，在该文件中的内容写入内容，但文件没有写入权限，发生了异常：',
             '在执行代码前为了测试方便，我们可以先去掉 testfile 文件的写权限，命令如下：',
             '再执行以上代码：',
             '你可以不带任何异常类型使用except，如下实例：',
             '以上方式try-except语句捕获所有发生的异常。但这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息。因为它捕获所有的异常。 ',
             '你也可以使用相同的except语句来处理多个异常信息，如下所示：',
             'try-finally 语句无论是否发生异常都将执行最后的代码。',
             '如果打开的文件没有可写权限，输出如下所示：',
             '同样的例子也可以写成如下方式：',
             '当在try块中抛出一个异常，立即执行finally块代码。',
             'finally块中的所有语句执行后，异常被再次触发，并执行except块代码。',
             '参数的内容不同于异常。',
             '一个异常可以带上参数，可作为输出的异常信息参数。',
             '你可以通过except语句来捕获异常的参数，如下所示：',
             '变量接收的异常值通常包含在异常的语句中。在元组的表单中变量可以接收一个或者多个值。',
             '元组通常包含错误字符串，错误数字，错误位置。',
             '以下为单个异常的实例：',
             '以上程序执行结果如下：',
             '我们可以使用raise语句自己触发异常',
             'raise语法格式如下：',
             '语句中 Exception 是异常的类型（例如，NameError）参数标准异常中任一种，args 是自已提供的异常参数。',
             '最后一个参数是可选的（在实践中很少使用），如果存在，是跟踪异常对象。',
             '一个异常可以是一个字符串，类或对象。 Python的内核提供的异常，大多数都是实例化的类，这是一个类的实例的参数。',
             '定义一个异常非常简单，如下所示：',
             '为了能够捕获异常，"except"语句必须有用相同的异常来抛出类对象或者字符串。',
             '例如我们捕获以上异常，"except"语句如下所示：',
             '执行以上代码，输出结果为：',
             '通过创建一个新的异常类，程序可以命名它们自己的异常。异常应该是典型的继承自Exception类，通过直接或间接的方式。',
             '以下为与RuntimeError相关的实例,实例中创建了一个类，基类为RuntimeError，用于在异常触发时输出更多的信息。',
             '在try语句块中，用户自定义的异常后执行except块语句，变量 e 是用于创建Networkerror类的实例。',
             '在你定义以上类后，你可以触发该异常，如下所示：'],
 'href': 'https://www.runoob.com/python/python-exceptions.html',
 'image': [],
 'title': 'Python 异常处理'}{'content': ['本章只讲述所有基本的 I/O 函数，更多函数请参考Python标准文档。',
             '最简单的输出方法是用print语句，你可以给它传递零个或多个用逗号隔开的表达式。此函数把你传递的表达式转换成一个字符串表达式，并将结果写到标准输出如下：',
             '你的标准屏幕上会产生以下结果：',
             'Python提供了两个内置函数从标准输入读入一行文本，默认的标准输入是键盘。如下：',
             'raw_input([prompt]) 函数从标准输入读取一个行，并返回一个字符串（去掉结尾的换行符）：',
             '这将提示你输入任意字符串，然后在屏幕上显示相同的字符串。当我输入"Hello Python！"，它的输出如下：',
             '',
             ' 函数和 ',
             ' 函数基本类似，但是 input 可以接收一个Python表达式作为输入，并将运算结果返回。',
             '这会产生如下的对应着输入的结果：',
             '现在，您已经可以向标准输入和输出进行读写。现在，来看看怎么读写实际的数据文件。',
             'Python 提供了必要的函数和方法进行默认情况下的文件基本操作。你可以用 ',
             ' 对象做大部分的文件操作。',
             '你必须先用Python内置的open()函数打开一个文件，创建一个file对象，相关的方法才可以调用它进行读写。',
             '语法：',
             '各个参数的细节如下：',
             '不同模式打开文件的完全列表：',
             '下图很好的总结了这几种模式：',
             '一个文件被打开后，你有一个file对象，你可以得到有关该文件的各种信息。',
             '以下是和file对象相关的所有属性的列表：',
             '如下实例：',
             '以上实例输出结果：',
             'File 对象的 close（）方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。',
             '当一个文件对象的引用被重新指定给另一个文件时，Python 会关闭之前的文件。用 close（）方法关闭文件是一个很好的习惯。',
             '语法：',
             '例子：',
             '以上实例输出结果：',
             '读写文件：',
             'file对象提供了一系列方法，能让我们的文件访问更轻松。来看看如何使用read()和write()方法来读取和写入文件。',
             'write()方法可将任何字符串写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。',
             "write()方法不会在字符串的结尾添加换行符('\\n')：",
             '语法：',
             '在这里，被传递的参数是要写入到已打开文件的内容。',
             '例子：',
             '上述方法会创建foo.txt文件，并将收到的内容写入该文件，并最终关闭文件。如果你打开这个文件，将看到以下内容:',
             'read（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。',
             '语法：',
             '在这里，被传递的参数是要从已打开文件中读取的字节计数。该方法从文件的开头开始读入，如果没有传入count，它会尝试尽可能多地读取更多的内容，很可能是直到文件的末尾。',
             '这里我们用到以上创建的 foo.txt 文件。',
             '以上实例输出结果：',
             '文件位置：',
             'tell()方法告诉你文件内的当前位置, 换句话说，下一次的读写会发生在文件开头这么多字节之后。',
             'seek（offset '
             '[,from]）方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。',
             '如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。如果设为1，则使用当前的位置作为参考位置。如果它被设为2，那么该文件的末尾将作为参考位置。',
             '例子：',
             '就用我们上面创建的文件foo.txt。',
             '以上实例输出结果：',
             'Python的os模块提供了帮你执行文件处理操作的方法，比如重命名和删除文件。',
             '要使用这个模块，你必须先导入它，然后才可以调用相关的各种功能。',
             'rename()方法：',
             'rename()方法需要两个参数，当前的文件名和新文件名。',
             '语法：',
             '例子：',
             '下例将重命名一个已经存在的文件test1.txt。',
             '你可以用remove()方法删除文件，需要提供要删除的文件名作为参数。',
             '语法：',
             '例子：',
             '下例将删除一个已经存在的文件test2.txt。',
             '所有文件都包含在各个不同的目录下，不过Python也能轻松处理。os模块有许多方法能帮你创建，删除和更改目录。',
             '可以使用os模块的mkdir()方法在当前目录下创建新的目录们。你需要提供一个包含了要创建的目录名称的参数。',
             '语法：',
             '例子：',
             '下例将在当前目录下创建一个新目录test。',
             '可以用chdir()方法来改变当前的目录。chdir()方法需要的一个参数是你想设成当前目录的目录名称。',
             '语法：',
             '例子：',
             '下例将进入"/home/newdir"目录。',
             'getcwd()方法：',
             'getcwd()方法显示当前的工作目录。',
             '语法：',
             '例子：',
             '下例给出当前目录：',
             'rmdir()方法删除目录，目录名称以参数传递。',
             '在删除这个目录之前，它的所有内容应该先被清除。',
             '语法：',
             '例子：',
             '以下是删除" /tmp/test"目录的例子。目录的完全合规的名称必须被给出，否则会在当前目录下搜索该目录。',
             'File 对象和 OS 对象提供了很多文件与目录的操作方法，可以通过点击下面链接查看详情：'],
 'href': 'https://www.runoob.com/python/python-files-io.html',
 'image': [],
 'title': 'Python 文件I/O'}{'content': ['Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。',
             'Python 本身也是由诸多其他语言发展而来的,这包括 '
             'ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。',
             '像 Perl 语言一样，Python 源代码同样遵循 GPL(GNU General Public License)协议。',
             '现在 Python 是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展。',
             'Python 2.7 被确定为最后一个 Python 2.x 版本，它除了支持 Python 2.x 语法外，还支持部分 '
             'Python 3.1 语法。'],
 'href': 'https://www.runoob.com/python/python-intro.html',
 'image': [],
 'title': 'Python 简介'}{'content': ['Python 语言与 Perl，C 和 Java 等语言有许多相似之处。但是，也存在一些差异。',
             '在本章中我们将来学习 Python 的基础语法，让你快速学会 Python 编程。',
             '交互式编程不需要创建脚本文件，是通过 Python 解释器的交互模式进来编写代码。',
             'linux上你只需要在命令行中输入 Python 命令即可启动交互式编程,提示窗口如下：',
             'Window 上在安装 Python 时已经安装了交互式编程客户端，提示窗口如下：',
             '在 python 提示符中输入以下文本信息，然后按 Enter 键查看运行效果：',
             '在 Python  2.7.6 版本中,以上实例输出结果如下：',
             '通过脚本参数调用解释器开始执行脚本，直到脚本执行完毕。当脚本执行完成后，解释器不再有效。',
             '让我们写一个简单的 Python 脚本程序。所有 Python 文件将以 ',
             ' 为扩展名。将以下的源代码拷贝至 test.py 文件中。',
             '这里，假设你已经设置了 Python 解释器 PATH 变量。使用以下命令运行程序：',
             '输出结果：',
             '让我们尝试另一种方式来执行 Python 脚本。修改 test.py 文件，如下所示：',
             '这里，假定您的Python解释器在/usr/bin目录中，使用以下命令执行脚本：',
             '输出结果：',
             '在 Python 里，标识符由字母、数字、下划线组成。',
             '在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。',
             'Python 中的标识符是区分大小写的。',
             '以下划线开头的标识符是有特殊意义的。以单下划线开头 ',
             ' 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 ',
             ' 而导入。',
             '以双下划线开头的 ',
             ' 代表类的私有成员，以双下划线开头和结尾的 ',
             ' 代表 Python 里特殊方法专用的标识，如 ',
             ' 代表类的构造函数。',
             'Python 可以同一行显示多条语句，方法是用分号 ',
             ' 分开，如：',
             '下面的列表显示了在Python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。',
             '所有 Python 的关键字只包含小写字母。',
             '学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 ',
             ' 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。',
             '缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。',
             '以下实例缩进为四个空格:',
             '以下代码将会执行错误：',
             ' 执行以上代码，会出现如下错误提醒：',
             '错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。',
             '如果是  ',
             ' 错误, 则 python 编译器是在告诉你"',
             '"，所有 python 对格式要求非常严格。',
             '因此，在 Python 的代码块中必须使用相同数目的行首缩进空格数。',
             '建议你在每个缩进层次使用 ',
             ' 或 ',
             ' 或 ',
             ' , 切记不能混用',
             'Python语句中一般以新行作为语句的结束符。',
             '但是我们可以使用斜杠（ \\）将一行的语句分为多行显示，如下所示：',
             '语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：',
             'Python 可以使用引号( ',
             ' )、双引号( ',
             ' )、三引号( ',
             ' 或 ',
             ' ) 来表示字符串，引号的开始与结束必须的相同类型的。 ',
             '其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。',
             'python中单行注释采用 # 开头。',
             '输出结果：',
             '注释可以在语句或表达式行末：',
             'python 中多行注释使用三个单引号(\'\'\')或三个双引号(""")。',
             '函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。',
             '空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。',
             '记住：空行也是程序代码的一部分。',
             '下面的程序执行后就会等待用户输入，按回车键后就会退出：',
             '以上代码中 ，',
             ' 实现换行。一旦用户按下 enter(回车) 键退出，其它键显示。',
             '执行以上代码，输入结果为：',
             'print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号 ',
             '。',
             '以上实例执行结果为：',
             '缩进相同的一组语句构成一个代码块，我们称之代码组。',
             '像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : '
             ')结束，该行之后的一行或多行代码构成代码组。',
             '我们将首行及后面的代码组称为一个子句(clause)。',
             '如下实例：',
             '很多程序可以执行一些操作来查看一些基本信息，Python 可以使用 ',
             ' 参数查看各参数帮助信息：',
             '我们在使用脚本形式执行 Python 时，可以接收命令行输入的参数，具体使用可以参照 ',
             '。'],
 'href': 'https://www.runoob.com/python/python-basic-syntax.html',
 'image': [],
 'title': 'Python 基础语法'}{'content': ['Python最新源码，二进制文档，新闻资讯等可以在Python的官网查看到：',
             'Python官网：',
             '你可以在以下链接中下载 Python 的文档，你可以下载 HTML、PDF 和 PostScript 等格式的文档。',
             'Python文档下载地址：',
             'Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。',
             '您需要下载适用于您使用平台的二进制代码，然后安装Python。',
             '如果您平台的二进制代码是不可用的，你需要使用C编译器手动编译源代码。',
             '编译的源代码，功能上有更多的选择性， 为python安装提供了更多的灵活性。',
             '以下是各个平台安装包的下载地址：',
             '以下为不同平台上安装 Python 的方法：',
             '以下为在 Unix & Linux 平台上安装 Python 的简单步骤：',
             '执行以上操作后，Python 会安装在 /usr/local/bin 目录中，Python 库安装在 '
             '/usr/local/lib/pythonXX，XX 为你使用的 Python 的版本号。',
             '以下为在 Window 平台上安装 Python 的简单步骤：',
             'MAC 系统一般都自带有 Python2.x版本 的环境，你也可以在链接 ',
             ' 上下载最新版安装。',
             '程序和可执行文件可以在许多目录，而这些路径很可能不在操作系统提供可执行文件的搜索路径中。',
             'path(路径)存储在环境变量中，这是由操作系统维护的一个命名的字符串。这些变量包含可用的命令行解释器和其他程序的信息。',
             'Unix或Windows中路径变量为PATH（UNIX区分大小写，Windows不区分大小写）。',
             '在Mac '
             'OS中，安装程序过程中改变了python的安装路径。如果你需要在其他目录引用Python，你必须在path中添加Python目录。',
             '/usr/local/bin/python 是 Python 的安装目录。',
             '在环境变量中添加Python目录：',
             ' 输入 ',
             'C:\\Python 是Python的安装目录。',
             '也可以通过以下方式设置：',
             '',
             '下面几个重要的环境变量，它应用于Python：',
             '有三种方式可以运行Python：',
             '你可以通过命令行窗口进入python并开在交互式解释器中开始编写Python代码。',
             '你可以在Unix，DOS或任何其他提供了命令行或者shell的系统进行python编码工作。',
             '以下为Python命令行参数：',
             '在你的应用程序中通过引入解释器可以在命令行中执行Python脚本，如下所示：',
             '在执行脚本时，请检查脚本是否有可执行权限。',
             'PyCharm 是由 JetBrains 打造的一款 Python IDE，支持 macOS、 Windows、 Linux '
             '系统。',
             'PyCharm 功能 : 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制……',
             'PyCharm 下载地址 : ',
             'PyCharm 安装地址：',
             '继续下一章之前，请确保您的环境已搭建成功。如果你不能够建立正确的环境，那么你就可以从您的系统管理员的帮助。',
             '在以后的章节中给出的例子已在 Python2.7.6 版本测试通过。'],
 'href': 'https://www.runoob.com/python/python-install.html',
 'image': [],
 'title': 'Python 环境搭建'}{'content': ['使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾:',
             '类的帮助信息可以通过ClassName.__doc__查看。',
             'class_suite 由类成员，方法，数据属性组成。',
             '以下是一个简单的 Python 类的例子:',
             '类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的',
             ', 按照惯例它的名称是 self。',
             '以上实例执行结果为：',
             '从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 ',
             ' 则指向类。',
             'self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:',
             '以上实例执行结果为：',
             '实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。',
             '以下使用类的名称 Employee 来实例化，并通过 __init__ 方法接收参数。',
             '您可以使用点号 ',
             ' 来访问对象的属性。使用如下类的名称访问类变量:',
             '完整实例：',
             '执行以上代码输出结果如下：',
             '你可以添加，删除，修改类的属性，如下所示：',
             '你也可以使用以下函数的方式来访问属性：',
             'Python内置类属性调用实例如下：',
             '执行以上代码输出结果如下：',
             'Python 使用了引用计数这一简单技术来跟踪和回收垃圾。',
             '一个内部跟踪变量，称为一个引用计数器。',
             '当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， '
             '它被垃圾回收。但是回收不是"立即"的，由解释器在适当的时机，将垃圾对象占用的内存空间回收。',
             '垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python '
             '的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， '
             '垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， '
             '试图清理所有未引用的循环。 ',
             '析构函数 __del__ ，__del__在对象销毁的时候被调用，当对象不再被使用时，__del__方法运行：',
             '以上实例运行结果如下：',
             '',
             '通常你需要在单独的文件中定义一个类，',
             '面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。',
             '通过继承创建的新类称为',
             '或',
             '，被继承的类称为',
             '、',
             '或',
             '。',
             '   ',
             '在python中继承中的一些特点：',
             '如果在继承元组中列了一个以上的类，那么它就被称作"多重继承" 。',
             '派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：',
             '以上代码执行结果如下：',
             '你可以继承多个类',
             '你可以使用issubclass()或者isinstance()方法来检测。',
             '如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：',
             '实例：',
             '执行以上代码输出结果如下：',
             '下表列出了一些通用的功能，你可以在自己的类重写：',
             'Python同样支持运算符重载，实例如下：',
             '以上代码执行结果如下所示:',
             '：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 ',
             '。',
             '在类的内部，使用 ',
             ' 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 self,且为第一个参数',
             '',
             '：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 ',
             '',
             'Python 通过改变名称来包含类名:',
             'Python不允许实例化的类访问私有数据，但你可以使用 ',
             '（ ',
             ' ）访问属性，参考以下实例：',
             '执行以上代码，执行结果如下：'],
 'href': 'https://www.runoob.com/python/python-object.html',
 'image': [],
 'title': 'Python 面向对象'}{'content': [' 本教程适合想从零开始学习 Python 编程语言的开发人员。当然本教程也会对一些模块进行深入，让你更好的了解 Python '
             '的应用。',
             '本教程主要针对 Python 2.x 版本的学习，如果你使用的是 Python 3.x 版本请移步至',
             '。',
             '本教程所有实例基于 Python2.7。',
             ' 在继续本教程之前，你应该了解一些基本的计算机编程术语。如果你学习过 PHP，ASP 等编程语言，将有助于你更快的了解 '
             'Python 编程。',
             ' 对于大多数程序语言，第一个入门编程代码便是 "Hello World！"，以下代码为使用 Python 输出 "Hello '
             'World！"：',
             'Python 3.0+ 版本已经把 print 作为一个内置函数，输出 "Hello World！" 代码如下：',
             ' ',
             ' ',
             ' ',
             ' '],
 'href': 'https://www.runoob.com/python/python-tutorial.html',
 'image': [],
 'title': 'Python 基础教程'}{'content': ['Python 中的变量赋值不需要类型声明。',
             '每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。',
             '每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。',
             '等号（=）用来给变量赋值。',
             '等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：',
             '以上实例中，100，1000.0和"John"分别赋值给counter，miles，name变量。',
             '执行以上程序会输出如下结果：',
             'Python允许你同时为多个变量赋值。例如：',
             '以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。',
             '您也可以为多个对象指定多个变量。例如：',
             '以上实例，两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 "john" 分配给变量 c。',
             '在内存中存储的数据可以有多种类型。',
             '例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。',
             'Python 定义了一些标准类型，用于存储各种类型的数据。',
             'Python有五个标准的数据类型：',
             '数字数据类型用于存储数值。',
             '他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。',
             '当你指定一个值时，Number对象就会被创建：',
             '您也可以使用del语句删除一些对象的引用。',
             ' del语句的语法是：',
             '您可以通过使用del语句删除单个或多个对象的引用。例如：',
             'Python支持四种不同的数字类型：',
             '一些数值类型的实例：',
             '字符串或串(String)是由数字、字母、下划线组成的一串字符。',
             '一般记为 :',
             '它是编程语言中表示文本的数据类型。 ',
             'python的字串列表有2种取值顺序:',
             '如果你要实现从字符串中获取一段子字符串的话，可以使用 ',
             ' 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。',
             ' 获取的子字符串包含头下标的字符，但不包含尾下标的字符。',
             '比如:',
             '当使用以冒号分隔的字符串，python 返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。',
             '上面的结果包含了 ',
             ' 的值 b，而取到的最大范围不包括',
             '，就是 ',
             ' 的值 f。',
             '加号（+）是字符串连接运算符，星号（*）是重复操作。如下实例：',
             '以上实例输出结果：',
             'Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 '
             '2（间隔一个位置）来截取字符串：',
             'List（列表） 是 Python 中使用最频繁的数据类型。',
             '列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。',
             '列表用 ',
             ' 标识，是 python 最通用的复合数据类型。',
             '列表中值的切割也可以用到变量 ',
             ' ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。',
             '加号 ',
             ' 是列表连接运算符，星号 ',
             ' 是重复操作。如下实例：',
             '以上实例输出结果：',
             '',
             '元组是另一个数据类型，类似于 List（列表）。',
             '元组用 ',
             '  标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。',
             '以上实例输出结果：',
             '以下是元组无效的，因为元组是不允许更新的。而列表是允许更新的：',
             '字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。',
             '两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。',
             '字典用"{ }"标识。字典由索引(key)和它对应的值value组成。',
             '输出结果为：',
             '有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。',
             '以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。'],
 'href': 'https://www.runoob.com/python/python-variable-types.html',
 'image': [],
 'title': 'Python 变量类型'}{'content': ['Python 程序能用很多方式处理日期和时间，转换日期格式是一个常见的功能。',
             'Python 提供了一个 time 和 calendar 模块可以用于格式化日期和时间。',
             '时间间隔是以秒为单位的浮点小数。',
             '每个时间戳都以自从1970年1月1日午夜（历元）经过了多长时间来表示。',
             'Python 的 time 模块下有很多函数可以转换常见日期格式。如函数time.time()用于获取当前时间戳, 如下实例:',
             '',
             '以上实例输出结果：',
             '时间戳单位最适于做日期运算。但是1970年之前的日期就无法以此表示了。太遥远的日期也不行，UNIX和Windows只支持到2038年。',
             '很多Python函数用一个元组装起来的9组数字处理时间:',
             '上述也就是struct_time元组。这种结构具有如下属性：',
             '从返回浮点数的时间戳方式向时间元组转换，只要将浮点数传递给如localtime之类的函数。',
             '以上实例输出结果：',
             '你可以根据需求选取各种格式，但是最简单的获取可读的时间模式的函数是asctime():',
             '以上实例输出结果：',
             '我们可以使用 time 模块的 strftime 方法来格式化日期，：',
             '实例演示：',
             '以上实例输出结果：',
             'python中时间日期格式化符号：',
             'Calendar模块有很广泛的方法用来处理年历和月历，例如打印某月的月历：',
             '以上实例输出结果：',
             'Time 模块包含了以下内置函数，既有时间处理的，也有转换时间格式的：',
             'Time模块包含了以下2个非常重要的属性：',
             '此模块的函数都是日历相关的，例如打印某月的字符月历。',
             '星期一是默认的每周第一天，星期天是默认的最后一天。更改设置需调用calendar.setfirstweekday()函数。模块包含了以下内置函数：',
             '在Python中，其他处理日期和时间的模块还有：'],
 'href': 'https://www.runoob.com/python/python-date-time.html',
 'image': [],
 'title': 'Python 日期和时间'}{'content': ['字典是另一种可变容器模型，且可存储任意类型对象。',
             '字典的每个键值 ',
             ' 对用冒号 ',
             ' 分割，每个键值对之间用逗号 ',
             ' 分割，整个字典包括在花括号 ',
             ' 中 ,格式如下所示：',
             '键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。',
             '值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。',
             '一个简单的字典实例：',
             '也可如此创建字典：',
             '把相应的键放入熟悉的方括弧，如下实例:',
             '以上实例输出结果：',
             '如果用字典里没有的键访问数据，会输出错误如下：',
             '以上实例输出结果：',
             '向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对如下实例:',
             '能删单一的元素也能清空字典，清空只需一项操作。',
             '显示删除一个字典用del命令，如下实例：',
             '但这会引发一个异常，因为用del后字典不再存在：',
             'del()方法后面也会讨论。',
             '字典值可以没有限制地取任何python对象，既可以是标准的对象，也可以是用户定义的，但键不行。',
             '两个重要的点需要记住：',
             '',
             '1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，如下实例：',
             '',
             '以上实例输出结果：',
             '2）键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行，如下实例：',
             '以上实例输出结果：',
             'Python字典包含了以下内置函数：',
             'Python字典包含了以下内置方法：'],
 'href': 'https://www.runoob.com/python/python-dictionary.html',
 'image': [],
 'title': 'Python 字典(Dictionary)'}{'content': ['Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python '
             '对象定义和Python语句。',
             '模块让你能够有逻辑地组织你的 Python 代码段。',
             '把相关的代码分配到一个模块里能让你的代码更好用，更易懂。',
             '模块能定义函数，类和变量，模块里也能包含可执行的代码。',
             '下例是个简单的模块 support.py：',
             '模块定义好后，我们可以使用 import 语句来引入模块，语法如下：',
             '比如要引用模块 math，就可以在文件最开始的地方用 ',
             ' 来引入。在调用 math 模块中的函数时，必须这样引用：',
             '当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。',
             '搜索路径是一个解释器会先进行搜索的所有目录的列表。如想要导入模块 support.py，需要把命令放在脚本的顶端：',
             '以上实例输出结果：',
             '一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。',
             'Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中。语法如下：',
             '例如，要导入模块 fib 的 fibonacci 函数，使用如下语句：',
             '这个声明不会把整个 fib 模块导入到当前的命名空间中，它只会将 fib 里的 fibonacci '
             '单个引入到执行这个声明的模块的全局符号表。',
             '把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：',
             '这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。',
             '例如我们想一次性引入 math 模块中所有的东西，语句如下：',
             '当你导入一个模块，Python 解析器对模块位置的搜索顺序是：',
             '模块搜索路径存储在 system 模块的 sys.path '
             '变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。',
             '作为环境变量，PYTHONPATH 由装在一个列表里的许多目录组成。PYTHONPATH 的语法和 shell 变量 PATH '
             '的一样。',
             '在 Windows 系统，典型的 PYTHONPATH 如下：',
             '在 UNIX 系统，典型的 PYTHONPATH 如下：',
             '变量是拥有匹配对象的名字（标识符）。命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典。',
             '一个 Python '
             '表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。',
             '每个函数都有自己的命名空间。类的方法的作用域规则和通常函数的一样。',
             'Python 会智能地猜测一个变量是局部的还是全局的，它假设任何在函数内赋值的变量都是局部的。',
             '因此，如果要给函数内的全局变量赋值，必须使用 global 语句。',
             'global VarName 的表达式会告诉 Python， VarName 是一个全局变量，这样 Python '
             '就不会在局部命名空间里寻找这个变量了。',
             '例如，我们在全局命名空间里定义一个变量 Money。我们再在函数内给变量 Money 赋值，然后 Python 会假定 '
             'Money 是一个局部变量。然而，我们并没有在访问前声明一个局部变量 Money，结果就是会出现一个 '
             'UnboundLocalError 的错误。取消 global 语句前的注释符就能解决这个问题。',
             'dir() 函数一个排好序的字符串列表，内容是一个模块里定义过的名字。',
             '返回的列表容纳了在一个模块里定义的所有模块，变量和函数。如下一个简单的实例：',
             '以上实例输出结果：',
             '在这里，特殊字符串变量__name__指向模块的名字，__file__指向该模块的导入文件名。',
             '根据调用地方的不同，globals() 和 locals() 函数可被用来返回全局和局部命名空间里的名字。',
             '如果在函数内部调用 locals()，返回的是所有能在该函数里访问的命名。',
             '如果在函数内部调用 globals()，返回的是所有在该函数里能访问的全局名字。',
             '两个函数的返回类型都是字典。所以名字们能用 keys() 函数摘取。',
             '当一个模块被导入到一个脚本，模块顶层部分的代码只会被执行一次。',
             '因此，如果你想重新执行模块里顶层部分的代码，可以用 reload() 函数。该函数会重新导入之前导入过的模块。语法如下：',
             '在这里，module_name要直接放模块的名字，而不是一个字符串形式。比如想重载 hello 模块，如下：',
             '包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。',
             '简单来说，包就是文件夹，但该文件夹下必须存在 __init__.py 文件, 该文件的内容可以为空。',
             ' 用于标识当前文件夹是一个包。',
             '考虑一个在 ',
             ' 目录下的 ',
             ' 文件，test.py 为测试调用包的代码，目录结构如下：',
             '现在，在 ',
             ' 目录下创建 ',
             '：',
             '然后我们在 ',
             ' ',
             '下创建 test.py 来调用 ',
             ' 包',
             '以上实例输出结果：',
             '如上，为了举例，我们只在每个文件里放置了一个函数，但其实你可以放置许多函数。你也可以在这些文件里定义Python的类，然后为这些类建一个包。'],
 'href': 'https://www.runoob.com/python/python-modules.html',
 'image': [],
 'title': 'Python 模块'}{'content': ['本章节主要说明Python的运算符。举个简单的例子',
             '。例子中，',
             ' 和 ',
             ' 被称为',
             '，"',
             '" 称为运算符。',
             'Python语言支持以下类型的运算符:',
             '接下来让我们一个个来学习Python的运算符。',
             '以下假设变量：',
             '：',
             '以下实例演示了Python所有算术运算符的操作：',
             '以上实例输出结果：',
             '以下假设变量a为10，变量b为20：',
             '以下实例演示了Python所有比较运算符的操作：',
             '以上实例输出结果：',
             '以下假设变量a为10，变量b为20：',
             '以下实例演示了Python所有赋值运算符的操作：',
             '以上实例输出结果：',
             '按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：',
             '下表中变量 a 为 60，b 为 13，二进制格式如下：',
             '以下实例演示了Python所有位运算符的操作：',
             '以上实例输出结果：',
             'Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:',
             '以上实例输出结果：',
             '以上实例输出结果：',
             '除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。',
             '以下实例演示了Python所有成员运算符的操作：',
             '以上实例输出结果：',
             ' 身份运算符用于比较两个对象的存储单元',
             ' ',
             ' 函数用于获取对象内存地址。',
             '以下实例演示了Python所有身份运算符的操作：',
             '以上实例输出结果：',
             '以下表格列出了从最高到最低优先级的所有运算符：',
             '以下实例演示了Python所有运算符优先级的操作：',
             '以上实例输出结果：'],
 'href': 'https://www.runoob.com/python/python-operators.html',
 'image': [],
 'title': 'Python 运算符'}{'content': ['Python的元组与列表类似，不同之处在于元组的元素不能修改。',
             '元组使用小括号，列表使用方括号。',
             '元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。',
             '如下实例：',
             '创建空元组',
             '元组中只包含一个元素时，需要在元素后面添加逗号',
             '元组与字符串类似，下标索引从0开始，可以进行截取，组合等。',
             '元组可以使用下标索引来访问元组中的值，如下实例:',
             '以上实例输出结果：',
             '元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:',
             '以上实例输出结果：',
             '元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:',
             '以上实例元组被删除后，输出变量会有异常信息，输出如下所示：',
             '与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。',
             '因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素，如下所示：',
             '元组：',
             '任意无符号的对象，以逗号隔开，默认为元组，如下实例：',
             '以上实例运行结果：',
             'Python元组包含了以下内置函数'],
 'href': 'https://www.runoob.com/python/python-tuples.html',
 'image': [],
 'title': 'Python 元组'}{'content': ['函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。',
             '函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。',
             '你可以定义一个由自己想要功能的函数，以下是简单的规则：',
             '默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。',
             '以下为一个简单的Python函数，它将一个字符串作为传入参数，再打印到标准显示设备上。',
             '定义一个函数只给了函数一个名称，指定了函数里包含的参数，和代码块结构。',
             '这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从Python提示符执行。',
             '如下实例调用了printme（）函数：',
             '以上实例输出结果：',
             '在 python 中，类型属于对象，变量是没有类型的：',
             '以上代码中，',
             ' 是 List 类型，',
             ' 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是 List 类型对象，也可以指向 '
             'String 类型对象。',
             '在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict '
             '等则是可以修改的对象。',
             'python 函数的参数传递：',
             'python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。',
             '实例中有 int 对象 2，指向它的变量是 b，在传递给 ChangeInt 函数时，按传值的方式复制了变量 b，a 和 b '
             '都指向了同一个 Int 对象，在 a=10 时，则新生成一个 int 值对象 10，并让 a 指向它。',
             '实例中传入函数的和在末尾添加新内容的对象用的是同一个引用，故输出结果如下：',
             '以下是调用函数时可使用的正式参数类型：',
             '必备参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。',
             '调用printme()函数，你必须传入一个参数，不然会出现语法错误：',
             '以上实例输出结果：',
             '关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。',
             '使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。',
             '以下实例在函数 printme() 调用时使用参数名：',
             '以上实例输出结果：',
             '下例能将关键字参数顺序不重要展示得更清楚：',
             '以上实例输出结果：',
             '调用函数时，默认参数的值如果没有传入，则被认为是默认值。下例会打印默认的age，如果age没有被传入：',
             '以上实例输出结果：',
             '你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名。基本语法如下：',
             '加了星号（*）的变量名会存放所有未命名的变量参数。不定长参数实例如下：',
             '以上实例输出结果：',
             'python 使用 lambda 来创建匿名函数。',
             'lambda函数的语法只包含一个语句，如下：',
             '如下实例：',
             '以上实例输出结果：',
             'return语句[表达式]退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。之前的例子都没有示范如何返回数值，下例便告诉你怎么做：',
             '以上实例输出结果：',
             '一个程序的所有的变量并不是在哪个位置都可以访问的。访问权限决定于这个变量是在哪里赋值的。'],
 'href': 'https://www.runoob.com/python/python-functions.html',
 'image': [],
 'title': 'Python 函数'}{'content': ['序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - '
             '它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。',
             ' Python有6个序列的内置类型，但最常见的是列表和元组。',
             '序列都可以进行的操作包括索引，切片，加，乘，检查成员。',
             '此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。',
             '列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。',
             '列表的数据项不需要具有相同的类型',
             '创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：',
             '与字符串的索引一样，列表索引从0开始。列表可以进行截取、组合等。',
             '使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示：',
             '以上实例输出结果：',
             '你可以对列表的数据项进行修改或更新，你也可以使用append()方法来添加列表项，如下所示：',
             '我们会在接下来的章节讨论append()方法的使用',
             '以上实例输出结果：',
             '可以使用 del 语句来删除列表的元素，如下实例：',
             '以上实例输出结果：',
             '我们会在接下来的章节讨论remove()方法的使用',
             '列表对 + 和  * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。',
             '如下所示：',
             'Python 的列表截取实例如下：',
             '描述：',
             'Python包含以下函数:',
             'Python包含以下方法:'],
 'href': 'https://www.runoob.com/python/python-lists.html',
 'image': [],
 'title': 'Python 列表(List)'}{'content': [],
 'href': 'https://www.runoob.com/quiz/python-quiz.html',
 'image': [],
 'title': 'Python 测验'}{'content': ['以下实例在Python2.7下测试通过：'],
 'href': 'https://www.runoob.com/python/python-100-examples.html',
 'image': [],
 'title': 'Python 100例'}{'content': ['本章节我们将为大家介绍如何使用 Python 语言来编码和解码 JSON 对象。',
             'JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式，易于人阅读和编写。',
             '使用 JSON 函数需要导入 json 库：',
             '。',
             'json.dumps 用于将 Python 对象编码成 JSON 字符串。',
             '以下实例将数组编码为 JSON 格式数据：',
             '以上代码执行结果为：',
             '使用参数让 JSON 数据格式化输出：',
             'python 原始类型向 json 类型的转化对照表：',
             'json.loads 用于解码 JSON 数据。该函数返回 Python 字段的数据类型。',
             '以下实例展示了Python 如何解码 JSON 对象：',
             '以上代码执行结果为：',
             'json 类型转换到 python 的类型对照表：',
             '更多内容参考：',
             '。',
             'Demjson 是 python 的第三方模块库，可用于编码和解码 JSON 数据，包含了 JSONLint '
             '的格式化及校验功能。',
             'Github 地址：',
             '官方地址：',
             '在使用 Demjson 编码或解码 JSON 数据前，我们需要先安装 Demjson 模块。本教程我们会下载 ',
             ' 并安装：',
             '更多安装介绍查看：',
             'Python encode() 函数用于将 Python 对象编码成 JSON 字符串。',
             '以下实例将数组编码为 JSON 格式数据：',
             '以上代码执行结果为：',
             'Python 可以使用 demjson.decode() 函数解码 JSON 数据。该函数返回 Python 字段的数据类型。',
             '以下实例展示了Python 如何解码 JSON 对象：',
             '以上代码执行结果为：'],
 'href': 'https://www.runoob.com/python/python-json.html',
 'image': [],
 'title': 'Python JSON'}{'content': ['本文为大家推荐几款款不错的 ',
             '（集成开发环境），比较推荐  PyCharm，当然你可以根据自己的喜好来选择适合自己的 Python IDE。',
             'PyCharm 是由 JetBrains 打造的一款 Python IDE。',
             'PyCharm 具备一般 ',
             ' 的功能，比如：调试、语法高亮、项目管理、代码跳转、智能提示、自动完成、单元测试、版本控制等。',
             '另外，PyCharm 还提供了一些很好的功能用于 Django 开发，同时支持 Google App '
             'Engine，更酷的是，PyCharm 支持 IronPython。',
             'PyCharm 官方下载地址：',
             '',
             '效果图查看： ',
             'Sublime Text 具有漂亮的用户界面和强大的功能，例如代码缩略图，Python '
             '的插件，代码段等。还可自定义键绑定，菜单和工具栏。',
             'Sublime Text 的主要功能包括：拼写检查，书签，完整的 Python API ， Goto '
             '功能，即时项目切换，多选择，多窗口等等。',
             'Sublime Text 是一个跨平台的编辑器，同时支持 Windows、Linux、Mac OS X等操作系统。',
             '',
             '使用Sublime Text 2的插件扩展功能，你可以轻松的打造一款不错的 Python '
             'IDE，以下推荐几款插件（你可以找到更多）：',
             'Eclipse可以在它的官方网站',
             '找到并下载，通常我们可以选择适合自己的Eclipse版本，比如Eclipse '
             'Classic。下载完成后解压到到你想安装的目录中即可。',
             '当然在执行Eclipse之前，你必须确认安装了Java运行环境,即必须安装JRE或JDK，你可以到（',
             '）找到JRE下载并安装。',
             '运行Eclipse之后，选择help-->Install new Software，如下图所示。',
             '点击Add，添加pydev的安装地址：',
             '，如下图所示。',
             '完成后点击"ok"，接着点击PyDev的"+"，展开PyDev的节点，要等一小段时间，让它从网上获取PyDev的相关套件，当完成后会多出PyDev的相关套件在子节点里，勾选它们然后按next进行安装。如下图所示。',
             '安装完成后，重启Eclipse即可',
             '安装完成后，还需要设置一下PyDev，选择Window -> '
             'Preferences来设置PyDev。设置Python的路径，从Pydev的Interpreter - '
             'Python页面选择New',
             '会弹出一个窗口让你选择Python的安装位置，选择你安装Python的所在位置。',
             '完成之后PyDev就设置完成，可以开始使用。',
             '安装好Eclipse+PyDev以后，我们就可以开始使用它来开发项目了。首先要创建一个项目，选择File -> New '
             '->Pydev Project',
             '会弹出一个新窗口，填写Project Name，以及项目保存地址，然后点击next完成项目的创建。',
             '光有项目是无法执行的，接着必须创建新的Pydev Moudle，选择File -> New -> Pydev Module',
             '在弹出的窗口中选择文件存放位置以及Moudle '
             'Name，注意Name不用加.py，它会自动帮助我们添加。然后点击Finish完成创建。',
             '输入"hello world"的代码。',
             '程序写完后，我们可以开始执行程序,在上方的工具栏上面找到执行的按钮。',
             '之后会弹出一个让你选择执行方式的窗口，通常我们选择Python Run，开始执行程序。',
             '推荐10 款最好的 Python IDE：',
             '当然还有非常多很棒的 Python IDE，你可以自由的选择，更多 Python IDE 请参阅：'],
 'href': 'https://www.runoob.com/python/python-ide.html',
 'image': ['//www.runoob.com/wp-content/uploads/2014/06/pycharm_ui_darcula.png'],
 'title': 'Python IDE'}{'content': ['Python的3\u200b\u200b.0版本，常被称为Python '
             '3000，或简称Py3k。相对于Python的早期版本，这是一个较大的升级。',
             '为了不带入过多的累赘，Python 3.0在设计的时候没有考虑向下相容。',
             '许多针对早期Python版本设计的程式都无法在Python 3.0上正常执行。',
             '为了照顾现有程式，Python 2.6作为一个过渡版本，基本使用了Python 2.x的语法和库，同时考虑了向Python '
             '3.0的迁移，允许使用部分Python 3.0的语法与函数。',
             '新的Python程式建议使用Python 3.0版本的语法。',
             '除非执行环境无法安装Python 3.0或者程式本身使用了不支援Python 3.0的第三方库。目前不支援Python '
             '3.0的第三方库有Twisted, py2exe, PIL等。',
             '大多数第三方库都正在努力地相容Python 3.0版本。即使无法立即使用Python 3.0，也建议编写相容Python '
             '3.0版本的程式，然后使用Python 2.6, Python 2.7来执行。',
             'Python 3.0的变化主要在以下几个方面:',
             'print语句没有了，取而代之的是print()函数。 Python 2.6与Python '
             '2.7部分地支持这种形式的print语法。在Python 2.6与Python 2.7里面，以下三种形式是等价的：',
             '然而，Python 2.6实际已经支持新的print()语法：',
             'Python 2 有 ASCII str() 类型，unicode() 是单独的，不是 byte 类型。',
             '现在， 在 Python 3，我们最终有了 Unicode (utf-8) 字符串，以及一个字节类：byte 和 '
             'bytearrays。',
             '由于 Python3.X 源码文件默认使用utf-8编码，这就使得以下代码是合法的： ',
             'Python 2.x',
             'Python 3.x',
             'Python中的除法较其它语言显得非常高端，有套很复杂的规则。Python中的除法有两个运算符，/和//',
             '首先来说/除法:',
             '在python '
             '2.x中/除法就跟我们熟悉的大多数语言，比如Java啊C啊差不多，整数相除的结果是一个整数，把小数部分完全忽略掉，浮点数除法会保留小数点的部分得到一个浮点数的结果。',
             '在python 3.x中/除法不再这么做了，对于整数之间的相除，结果也会是浮点数。',
             'Python 2.x:',
             'Python 3.x:',
             '而对于//除法，这种除法叫做floor除法，会对除法的结果自动进行一个floor操作，在python 2.x和python '
             '3.x中是一致的。',
             'python 2.x:',
             'python 3.x:',
             '注意的是并不是舍弃小数部分，而是执行 floor 操作，如果要截取整数部分，那么需要使用 math 模块的 trunc 函数',
             'python 3.x:',
             '在 Python 3 中处理异常也轻微的改变了，在 Python 3 中我们现在使用 as 作为关键词。',
             '捕获异常的语法由 ',
             ' 改为 ',
             '。',
             '使用语法except (exc1, exc2) as var可以同时捕获多种类别的异常。 Python '
             '2.6已经支持这两种语法。',
             '在2.x时代，异常在代码中除了表示程序错误，还经常做一些普通控制结构应该做的事情，在3.x中可以看出，设计者让异常变的更加专一，只有在错误发生的情况才能去用异常捕获语句来处理。',
             '在 Python 2 中 xrange() 创建迭代对象的用法是非常流行的。比如： for 循环或者是列表/集合/字典推导式。',
             '这个表现十分像生成器（比如。"惰性求值"）。但是这个 xrange-iterable 是无穷的，意味着你可以无限遍历。',
             '由于它的惰性求值，如果你不得仅仅不遍历它一次，xrange() 函数 比 range() 更快（比如 for '
             '循环）。尽管如此，对比迭代一次，不建议你重复迭代多次，因为生成器每次都从头开始。',
             '在 Python 3 中，range() 是像 xrange() 那样实现以至于一个专门的 xrange() 函数都不再存在（在 '
             'Python 3 中 xrange() 会抛出命名异常）。',
             'Python 2',
             'Python 3',
             '八进制数必须写成0o777，原来的形式0777不能用了；二进制必须写成0b111。',
             '新增了一个bin()函数用于将一个整数转换成二进制字串。 Python 2.6已经支持这两种语法。',
             '在Python 3.x中，表示八进制字面量的方式只有一种，就是0o1000。',
             'python 2.x',
             'python 3.x',
             'Python 2.x中不等于有两种写法 != 和 <>',
             'Python 3.x中去掉了<>, 只有!=一种写法，还好，我从来没有使用<>的习惯',
             'Python 2.x 中反引号``相当于repr函数的作用',
             'Python 3.x '
             '中去掉了``这种写法，只允许使用repr函数，这样做的目的是为了使代码看上去更清晰么？不过我感觉用repr的机会很少，一般只在debug的时候才用，多数时候还是用str函数来用字符串描述对象。',
             'StringIO模块现在被合并到新的io模组内。 new, md5, gopherlib等模块被删除。 Python '
             '2.6已经支援新的io模组。',
             'httplib, BaseHTTPServer, CGIHTTPServer, SimpleHTTPServer, '
             'Cookie, cookielib被合并到http包内。',
             '取消了exec语句，只剩下exec()函数。 Python 2.6已经支援exec()函数。',
             '1）Py3.X去除了long类型，现在只有一种整型——int，但它的行为就像2.X版本的long ',
             '2）新增了bytes类型，对应于2.X版本的八位串，定义一个bytes字面量的方法如下： ',
             'str 对象和 bytes 对象可以使用 .encode() (',
             ') 或 .decode() (',
             ')方法相互转化。 ',
             '3）dict的.keys()、.items '
             '和.values()方法返回迭代器，而之前的iterkeys()等函数都被废弃。同时去掉的还有 dict.has_key()，用 '
             'in替代它吧 。'],
 'href': 'https://www.runoob.com/python/python-2x-3x.html',
 'image': [],
 'title': 'Python2.x与3\u200b\u200b.x版本区别'}{'content': ['Python 提供了多个图形开发界面的库，几个常用 Python GUI 库如下：',
             'Tkinter 是 Python 的标准 GUI 库。Python 使用 Tkinter 可以快速的创建 GUI 应用程序。',
             '由于 Tkinter 是内置到 python 的安装包中、只要安装好 Python 之后就能 import Tkinter '
             '库、而且 IDLE 也是用 Tkinter 编写而成、对于简单的图形界面 Tkinter 还是能应付自如。',
             '创建一个GUI程序',
             '以上代码执行结果如下图:',
             '',
             '以上代码执行结果如下图:',
             'Tkinter的提供各种控件，如按钮，标签和文本框，一个GUI应用程序中使用。这些控件通常被称为控件或者部件。',
             '目前有15种Tkinter的部件。我们提出这些部件以及一个简短的介绍，在下面的表:',
             '标准属性也就是所有控件的共同属性，如大小，字体和颜色等等。',
             'Tkinter控件有特定的几何状态管理方法，管理整个控件区域组织，一下是Tkinter公开的几何管理类：包、网格、位置'],
 'href': 'https://www.runoob.com/python/python-gui-tkinter.html',
 'image': ['//www.runoob.com/wp-content/uploads/2013/12/tk.jpg'],
 'title': 'Python GUI 编程(Tkinter)'}{'content': ['XML 指可扩展标记语言（e',
             'tensible ',
             'arkup ',
             'anguage）。你可以通过本站学习 ',
             '',
             'XML 被设计用来传输和存储数据。',
             'XML 是一套定义语义标记的规则，这些标记将文档分成许多部件并对这些部件加以标识。',
             '它也是元标记语言，即定义了用于定义其他与特定领域有关的、语义的、结构化的标记语言的句法语言。',
             '常见的 XML 编程接口有 DOM 和 SAX，这两种接口处理 XML 文件的方式不同，当然使用场合也不同。',
             'Python 有三种方法解析 XML，SAX，DOM，以及 ElementTree:',
             'Python 标准库包含 SAX 解析器，SAX '
             '用事件驱动模型，通过在解析XML的过程中触发一个个的事件并调用用户定义的回调函数来处理XML文件。',
             '将 XML 数据在内存中解析成一个树，通过对树的操作来操作XML。',
             'ElementTree就像一个轻量级的DOM，具有方便友好的API。代码可用性好，速度快，消耗内存少。',
             '因DOM需要将XML数据映射到内存中的树，一是比较慢，二是比较耗内存，而SAX流式读取XML文件，比较快，占用内存少，但需要用户实现回调函数（handler）。',
             '本章节使用到的 XML 实例文件 movies.xml 内容如下：',
             'SAX是一种基于事件驱动的 API。',
             '利用SAX解析XML文档牵涉到两个部分: ',
             '和',
             '。',
             '解析器负责读取XML文档，并向事件处理器发送事件，如元素开始跟元素结束事件。',
             '而事件处理器则负责对事件作出响应，对传递的XML数据进行处理。'],
 'href': 'https://www.runoob.com/python/python-xml.html',
 'image': [],
 'title': 'Python XML 解析'}{'content': ['多线程类似于同时执行多个不同程序，多线程运行有如下优点：',
             '线程在执行过程中与进程还是有区别的。每个独立的进程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。',
             '每个线程都有他自己的一组CPU寄存器，称为线程的上下文，该上下文反映了线程上次运行该线程的CPU寄存器的状态。',
             '指令指针和堆栈指针寄存器是线程上下文中两个最重要的寄存器，线程总是在进程得到上下文中运行的，这些地址都用于标志拥有线程的进程地址空间中的内存。',
             'Python中使用线程有两种方式：函数或者用类来包装线程对象。',
             '函数式：调用thread模块中的start_new_thread()函数来产生新线程。语法如下:',
             '参数说明:',
             '执行以上程序输出结果如下：',
             '线程的结束一般依靠线程函数的自然结束；也可以在线程函数中调用thread.exit()，他抛出SystemExit '
             'exception，达到退出线程的目的。',
             'Python通过两个标准库thread和threading提供对线程的支持。thread提供了低级别的、原始的线程以及一个简单的锁。',
             'threading 模块提供的其他方法： ',
             '除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法:',
             '使用Threading模块创建线程，直接从threading.Thread继承，然后重写__init__方法和run方法：',
             '以上程序执行结果如下；',
             '如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。',
             '使用Thread对象的Lock和Rlock可以实现简单的线程同步，这两个对象都有acquire方法和release方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到acquire和release方法之间。如下：',
             '多线程的优势在于可以同时运行多个任务（至少感觉起来是这样）。但是当线程需要共享数据时，可能存在数据不同步的问题。',
             '考虑这样一种情况：一个列表里所有元素都是0，线程"set"从后向前把所有元素改成1，而线程"print"负责从前往后读取列表并打印。',
             '那么，可能线程"set"开始改的时候，线程"print"便来打印列表了，输出就成了一半0一半1，这就是数据的不同步。为了避免这种情况，引入了锁的概念。',
             '锁有两种状态——锁定和未锁定。每当一个线程比如"set"要访问共享数据时，必须先获得锁定；如果已经有别的线程比如"print"获得锁定了，那么就让线程"set"暂停，也就是同步阻塞；等到线程"print"访问完毕，释放锁以后，再让线程"set"继续。',
             '经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的尴尬场面。',
             ' '
             'Python的Queue模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列PriorityQueue。这些队列都实现了锁原语，能够在多线程中直接使用。可以使用队列来实现线程间的同步。',
             'Queue模块中的常用方法:',
             '',
             '以上程序执行结果：'],
 'href': 'https://www.runoob.com/python/python-multithreading.html',
 'image': [],
 'title': 'Python 多线程'}{'content': ['SMTP（Simple Mail Transfer '
             'Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。',
             'python的smtplib提供了一种很方便的途径发送电子邮件。它对smtp协议进行了简单的封装。',
             'Python创建 SMTP 对象语法如下：',
             '参数说明：',
             'Python SMTP 对象使用 sendmail 方法发送邮件，语法如下：',
             '参数说明：',
             '这里要注意一下第三个参数，msg '
             '是字符串，表示邮件。我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，发送邮件的时候，要注意  msg '
             '的格式。这个格式就是 smtp 协议中定义的格式。',
             '以下执行实例需要你本机已安装了支持 SMTP 的服务，如：sendmail。',
             '以下是一个使用 Python 发送邮件简单的实例：',
             '我们使用三个引号来设置邮件信息，标准邮件需要三个头部信息： ',
             ', ',
             ', 和 ',
             ' ，每个信息直接使用空行分割。',
             '我们通过实例化 smtplib 模块的 SMTP 对象 ',
             ' 来连接到 SMTP 访问，并使用 ',
             ' 方法来发送信息。',
             '执行以上程序，如果你本机安装 ',
             '，就会输出：',
             '查看我们的收件箱(一般在垃圾箱)，就可以查看到邮件信息：',
             '如果我们本机没有 sendmail 访问，也可以使用其他邮件服务商的 SMTP 访问（QQ、网易、Google等）。',
             'Python发送HTML格式的邮件与发送纯文本消息的邮件不同之处就是将MIMEText中_subtype设置为html。具体代码如下：',
             '执行以上程序，如果你本机安装sendmail，就会输出：',
             '查看我们的收件箱(一般在垃圾箱)，就可以查看到邮件信息：',
             '发送带附件的邮件，首先要创建MIMEMultipart()实例，然后构造附件，如果有多个附件，可依次构造，最后利用smtplib.smtp发送。',
             '查看我们的收件箱(一般在垃圾箱)，就可以查看到邮件信息：',
             '邮件的 HTML 文本中一般邮件服务商添加外链是无效的，正确添加图片的实例如下所示：',
             '查看我们的收件箱(如果在垃圾箱可能需要移动到收件箱才可正常显示)，就可以查看到邮件信息：',
             '这里使用了 QQ 邮箱(你也可以使用 163，Gmail等)的 SMTP 服务，需要做以下配置：',
             'QQ 邮箱通过生成授权码来设置密码：',
             'QQ 邮箱 SMTP 服务器地址：smtp.qq.com，ssl 端口：465。',
             '以下实例你需要修改：发件人邮箱（你的QQ邮箱），密码，收件人邮箱（可发给自己）。',
             '发送成功后，登陆收件人邮箱即可查看：',
             '更多内容请参阅：',
             '。'],
 'href': 'https://www.runoob.com/python/python-email.html',
 'image': [],
 'title': 'Python SMTP发送邮件'}{'content': ['Python 标准数据库接口为 Python DB-API，Python DB-API为开发人员提供了数据库应用编程接口。',
             'Python 数据库接口支持非常多的数据库，你可以选择适合你项目的数据库：',
             '你可以访问',
             '查看详细的支持数据库列表。',
             '不同的数据库你需要下载不同的DB '
             'API模块，例如你需要访问Oracle数据库和Mysql数据，你需要下载Oracle和MySQL数据库模块。',
             'DB-API 是一个规范. 它定义了一系列必须的对象和数据库存取方式, '
             '以便为各种各样的底层数据库系统和多种多样的数据库接口程序提供一致的访问接口 。',
             'Python的DB-API，为大多数的数据库实现了接口，使用它连接各数据库后，就可以用相同的方式操作各数据库。 ',
             'Python DB-API使用流程：',
             'MySQLdb 是用于Python链接Mysql数据库的接口，它实现了 Python 数据库 API 规范 V2.0，基于 '
             'MySQL C API 上建立的。',
             '为了用DB-API编写MySQL脚本，必须确保已经安装了MySQL。复制以下代码，并执行：',
             '如果执行后的输出结果如下所示，意味着你没有安装 MySQLdb 模块：',
             '安装MySQLdb，请访问 ',
             ' ，(Linux平台可以访问：',
             ')从这里可选择适合您的平台的安装包，分为预编译的二进制文件和源代码安装包。',
             '如果您选择二进制文件发行版本的话，安装过程基本安装提示即可完成。如果从源代码进行安装的话，则需要切换到MySQLdb发行版本的顶级目录，并键入下列命令:',
             '请确保您有root权限来安装上述模块。',
             '连接数据库前，请先确认以下事项：',
             '以下实例链接Mysql的TESTDB数据库：',
             '执行以上脚本输出结果如下：',
             '如果数据库连接存在我们可以使用execute()方法来为数据库创建表，如下所示创建表EMPLOYEE：',
             '以下实例使用执行 SQL INSERT 语句向表 EMPLOYEE 插入记录：',
             '以上例子也可以写成如下形式：',
             '以下代码使用变量向SQL语句中传递参数:',
             'Python查询Mysql使用 fetchone() 方法获取单条数据, 使用fetchall() 方法获取多条数据。',
             '查询EMPLOYEE表中salary（工资）字段大于1000的所有数据：',
             '以上脚本执行结果如下：',
             "更新操作用于更新数据表的的数据，以下实例将 EMPLOYEE 表中的 SEX 字段为 'M' 的 AGE 字段递增 1：",
             '删除操作用于删除数据表中的数据，以下实例演示了删除数据表 EMPLOYEE 中 AGE 大于 20 的所有数据：',
             '事务机制可以确保数据一致性。',
             '事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。',
             'Python DB API 2.0 的事务提供了两个方法 commit 或 rollback。',
             '对于支持事务的数据库， 在Python数据库编程中，当游标建立之时，就自动开始了一个隐形的数据库事务。',
             'commit()方法游标的所有更新操作，rollback（）方法回滚当前游标的所有操作。每一个方法都开始了一个新的事务。',
             'DB API中定义了一些数据库操作的错误及异常，下表列出了这些错误和异常:'],
 'href': 'https://www.runoob.com/python/python-mysql.html',
 'image': [],
 'title': 'Python 操作 MySQL 数据库'}{'content': ['CGI 目前由 NCSA 维护，NCSA 定义 CGI 如下：',
             'CGI(Common Gateway Interface)，通用网关接口，它是一段程序，运行在服务器上如：HTTP '
             '服务器，提供同客户端 HTML 页面的接口。',
             '为了更好的了解 CGI 是如何工作的，我们可以从在网页上点击一个链接或 URL 的流程：',
             'CGI 程序可以是 Python 脚本，PERL 脚本，SHELL 脚本，C 或者 C++ 程序等。',
             '在你进行 CGI 编程前，确保您的 Web 服务器支持 CGI 及已经配置了 CGI 的处理程序。',
             'Apache 支持 CGI 配置：',
             '设置好CGI目录：',
             '所有的HTTP服务器执行 CGI 程序都保存在一个预先配置的目录。这个目录被称为 CGI 目录，并按照惯例，它被命名为 '
             '/var/www/cgi-bin 目录。',
             'CGI 文件的扩展名为 ',
             '，python 也可以使用 ',
             ' 扩展名。',
             '默认情况下，Linux 服务器配置运行的 cgi-bin 目录中为 /var/www。',
             '如果你想指定其他运行 CGI 脚本的目录，可以修改 httpd.conf 配置文件，如下所示：',
             '在 AddHandler 中添加 .py 后缀，这样我们就可以访问 .py 结尾的 python 脚本文件：',
             '我们使用 Python 创建第一个 CGI 程序，文件名为 hello.py，文件位于 /var/www/cgi-bin '
             '目录中，内容如下：',
             '文件保存后修改 hello.py，修改文件权限为 755：',
             '以上程序在浏览器访问 ',
             ' 显示结果如下：',
             '',
             '这个的hello.py脚本是一个简单的Python脚本，脚本第一行的输出内容"Content-type:text/html"发送到浏览器并告知浏览器显示的内容类型为"text/html"。',
             '用 print 输出一个空行用于告诉服务器结束头部信息。',
             'hello.py文件内容中的" '
             'Content-type:text/html"即为HTTP头部的一部分，它会发送给浏览器告诉浏览器文件的内容类型。',
             'HTTP头部的格式如下：',
             '例如：',
             '以下表格介绍了CGI程序中HTTP头部经常使用的信息：',
             '所有的CGI程序都接收以下的环境变量，这些变量在CGI程序中发挥了重要的作用：',
             '以下是一个简单的CGI脚本输出CGI的环境变量：',
             '将以上点保存为 test.py ,并修改文件权限为 755，执行结果如下：',
             '浏览器客户端通过两种方法向服务器传递信息，这两种方法就是 GET 方法和 POST 方法。',
             'GET方法发送编码后的用户信息到服务端，数据信息包含在请求页面的URL上，以"?"号分割, 如下所示：',
             '以下是一个简单的URL，使用GET方法向hello_get.py程序发送两个参数：',
             '以下为hello_get.py文件的代码：',
             '文件保存后修改 hello_get.py，修改文件权限为 755：',
             '浏览器请求输出结果：',
             '以下是一个通过HTML的表单使用GET方法向服务器发送两个数据，提交的服务器脚本同样是hello_get.py文件，hello_get.html '
             '代码如下：',
             '默认情况下 cgi-bin 目录只能存放脚本文件，我们将 hello_get.html 存储在 test 目录下，修改文件权限为 '
             '755：',
             'Gif 演示如下所示：',
             '使用POST方法向服务器传递数据是更安全可靠的，像一些敏感信息如用户密码等需要使用POST传输数据。',
             '以下同样是hello_get.py ，它也可以处理浏览器提交的POST表单数据:',
             '以下为表单通过POST方法（',
             '）向服务器脚本 hello_get.py 提交数据:',
             'Gif 演示如下所示：',
             'checkbox用于提交一个或者多个选项数据，HTML代码如下：',
             '以下为 checkbox.py 文件的代码：',
             '修改 checkbox.py 权限：',
             '浏览器访问 Gif 演示图：',
             'Radio 只向服务器传递一个数据，HTML代码如下：',
             'radiobutton.py 脚本代码如下：',
             '修改 radiobutton.py 权限：',
             '浏览器访问 Gif 演示图：',
             'Textarea 向服务器传递多行数据，HTML代码如下：',
             'textarea.py 脚本代码如下：',
             '修改 textarea.py 权限：',
             '浏览器访问 Gif 演示图：',
             'HTML 下拉框代码如下：',
             'dropdown.py 脚本代码如下所示：',
             '修改 dropdown.py 权限：',
             '浏览器访问 Gif 演示图：',
             '在 http 协议一个很大的缺点就是不对用户身份的进行判断，这样给编程人员带来很大的不便，而 cookie '
             '功能的出现弥补了这个不足。',
             ' cookie 就是在客户访问脚本的同时，通过客户的浏览器，在客户硬盘上写入纪录数据 '
             '，当下次客户访问脚本时取回数据信息，从而达到身份判别的功能，cookie 常用在身份校验中。',
             'http cookie的发送是通过http头部来实现的，他早于文件的传递，头部set-cookie的语法如下：',
             'Cookie的设置非常简单，cookie会在http头部单独发送。以下实例在cookie中设置了name 和 expires：',
             '将以上代码保存到 cookie_set.py，并修改 cookie_set.py 权限：',
             '以上实例使用了 Set-Cookie '
             '头信息来设置Cookie信息，可选项中设置了Cookie的其他属性，如过期时间Expires，域名Domain，路径Path。这些信息设置在 '
             '"Content-type:text/html"之前。',
             'Cookie信息检索页非常简单，Cookie信息存储在CGI的环境变量HTTP_COOKIE中，存储格式如下：',
             '以下是一个简单的CGI检索cookie信息的程序：',
             '将以上代码保存到 cookie_get.py，并修改 cookie_get.py 权限：',
             '以上 cookie 设置颜色 Gif 如下所示：',
             'HTML设置上传文件的表单需要设置 ',
             ' 属性为 ',
             '，代码如下所示：',
             'save_file.py脚本文件代码如下：',
             '将以上代码保存到 save_file.py，并修改 save_file.py 权限：',
             '以上 cookie 设置颜色 Gif 如下所示：',
             '如果你使用的系统是Unix/Linux，你必须替换文件分隔符，在window下只需要使用open()语句即可：',
             '我们先在当前目录下创建 foo.txt 文件，用于程序的下载。',
             '文件下载通过设置HTTP头信息来实现，功能代码如下：'],
 'href': 'https://www.runoob.com/python/python-cgi.html',
 'image': [],
 'title': 'Python CGI 编程'}{'content': ['正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。',
             'Python 自1.5版本起增加了re 模块，它提供 Perl 风格的正则表达式模式。',
             're 模块使 Python 语言拥有全部的正则表达式功能。 ',
             'compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。 ',
             're 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。',
             '本章节主要介绍Python中常用的正则表达式处理函数。',
             're.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。',
             '：',
             '函数参数说明：',
             '匹配成功re.match方法返回一个匹配的对象，否则返回None。',
             '我们可以使用group(num) 或  groups() 匹配对象函数来获取匹配表达式。',
             '以上实例运行输出结果为：',
             '以上实例执行结果如下：',
             're.search 扫描整个字符串并返回第一个成功的匹配。',
             '函数语法：',
             '函数参数说明：',
             '匹配成功re.search方法返回一个匹配的对象，否则返回None。',
             '我们可以使用group(num) 或  groups() 匹配对象函数来获取匹配表达式。',
             '以上实例运行输出结果为：',
             're.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。',
             'Python 的 re 模块提供了re.sub用于替换字符串中的匹配项。',
             '语法：',
             '参数：',
             '以下实例中将字符串中的匹配的数字乘以 2：',
             '执行输出结果为：',
             'compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() '
             '这两个函数使用。',
             '语法格式为：',
             '参数：',
             '在上面，当匹配成功时返回一个 Match 对象，其中：',
             '再看看一个例子：',
             '在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。',
             ' match 和 search  是匹配一次 findall 匹配所有。',
             '语法格式为：',
             '参数：',
             '查找字符串中的所有数字：',
             '输出结果：',
             '和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。',
             '参数：',
             '输出结果：',
             'split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：',
             '参数：',
             're.compile() 返回 RegexObject 对象。',
             'group() 返回被 RE 匹配的字符串。',
             '正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。多个标志可以通过按位 OR(|) '
             '它们来指定。如 re.I | re.M 被设置成 I 和 M 标志：',
             '模式字符串使用特殊的语法来表示一个正则表达式：',
             '字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。',
             '多数字母和数字前加一个反斜杠时会拥有不同的含义。',
             '标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。',
             '反斜杠本身需要使用反斜杠转义。',
             "由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示它们。模式元素(如 r'\\t'，等价于 "
             "'\\\\t')匹配相应的特殊字符。",
             '下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。'],
 'href': 'https://www.runoob.com/python/python-reg-expressions.html',
 'image': [],
 'title': 'Python 正则表达式'}{'content': ['字符串是 Python 中最常用的数据类型。我们可以使用引号(\'或")来创建字符串。',
             '创建字符串很简单，只要为变量分配一个值即可。例如：',
             'Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。',
             'Python 访问子字符串，可以使用方括号来截取字符串，如下实例：',
             '以上实例执行结果：',
             '我们可以对字符串进行截取并与其他字符串进行连接，如下实例：',
             '以上实例执行结果',
             '在需要在字符中使用特殊字符时，python 用反斜杠 ',
             ' 转义字符。如下表：',
             '下表实例变量 a 值为字符串 "Hello"，b 变量值为 "Python"：',
             '以上程序执行结果为：',
             'Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 '
             '%s 的字符串中。',
             '在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。',
             '如下实例：',
             '以上实例输出结果：',
             'python 字符串格式化符号:',
             '格式化操作符辅助指令:',
             'Python2.6 开始，新增了一种格式化字符串的函数 ',
             '，它增强了字符串格式化的功能。',
             'python中三引号可以将复杂的字符串进行复制:',
             'python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。',
             '三引号的语法是一对连续的单引号或者双引号（通常都是成对的用）。',
             '三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（所见即所得）格式的。',
             '一个典型的用例是，当你需要一块HTML或者SQL时，这时当用三引号标记，使用传统的转义字符体系将十分费神。',
             'Python 中定义一个 Unicode 字符串和定义一个普通字符串一样简单：',
             '引号前小写的"u"表示这里创建的是一个 Unicode 字符串。如果你想加入一个特殊字符，可以使用 Python 的 '
             'Unicode-Escape 编码。如下例所示：',
             '被替换的 \\u0020 标识表示在给定位置插入编码值为 0x0020 的 Unicode 字符（空格符）。',
             '字符串方法是从python1.6到2.0慢慢加进来的——它们也被加到了Jython中。',
             '这些方法实现了string模块的大部分方法，如下表所示列出了目前字符串内建支持的方法，所有的方法都包含了对Unicode的支持，有一些甚至是专门用于Unicode的。'],
 'href': 'https://www.runoob.com/python/python-strings.html',
 'image': [],
 'title': 'Python 字符串'}{'content': ['Python Number 数据类型用于存储数值。',
             '数据类型是不允许改变的,这就意味着如果改变 Number 数据类型的值，将重新分配内存空间。',
             '以下实例在变量赋值时 Number 对象将被创建：',
             '您也可以使用del语句删除一些 Number 对象引用。 ',
             'del语句的语法是：',
             '您可以通过使用del语句删除单个或多个对象，例如：',
             'Python 支持四种不同的数值类型：',
             'Python 中数学运算常用的函数基本都在 math 模块、cmath 模块中。',
             'Python  math 模块提供了许多对浮点数的数学运算函数。',
             'Python cmath 模块包含了一些用于复数运算的函数。',
             'cmath 模块的函数跟 math 模块函数基本一致，区别是 cmath 模块运算的是复数，math 模块运算的是数学运算。',
             '要使用 math 或 cmath 函数必须先导入：',
             '查看 math 查看包中的内容:',
             '下文会介绍各个函数的具体应用。',
             '查看 cmath 查看包中的内容',
             '实例',
             '随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。',
             'Python包含以下常用随机数函数：',
             'Python包括以下三角函数：'],
 'href': 'https://www.runoob.com/python/python-numbers.html',
 'image': [],
 'title': 'Python Number(数字)'}{'content': ['Python pass 是空语句，是为了保持程序结构的完整性。',
             ' 不做任何事情，一般用做占位语句。',
             'Python 语言 pass 语句语法格式如下：',
             '测试实例：',
             '以上实例执行结果：'],
 'href': 'https://www.runoob.com/python/python-pass-statement.html',
 'image': [],
 'title': 'Python pass 语句'}{'content': ['Python continue 语句跳出本次循环，而break跳出整个循环。',
             'continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。',
             'continue语句用在while和for循环中。',
             '以上实例执行结果：'],
 'href': 'https://www.runoob.com/python/python-continue-statement.html',
 'image': [],
 'title': 'Python continue  语句'}{'content': ['Python break语句，就像在C语言中，打破了最小封闭for或while循环。',
             'break语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。',
             ' break语句用在while和for循环中。',
             '如果您使用嵌套循环，break语句将停止执行最深层的循环，并开始执行下一行代码。',
             '以上实例执行结果：'],
 'href': 'https://www.runoob.com/python/python-break-statement.html',
 'image': [],
 'title': 'Python break 语句'}{'content': ['Python 语言允许在一个循环体里面嵌入另一个循环。',
             '你可以在循环体内嵌入其他的循环体，如在while循环中可以嵌入for循环，反之，你可以在for循环中嵌入while循环。',
             '以下实例使用了嵌套循环输出2~100之间的素数：',
             '以上实例输出结果:'],
 'href': 'https://www.runoob.com/python/python-nested-loops.html',
 'image': [],
 'title': 'Python 循环嵌套'}{'content': ['Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。',
             'for循环的语法格式如下：',
             '以上实例输出结果:',
             '另外一种执行循环的遍历方式是通过索引，如下实例：',
             '以上实例输出结果：',
             '以上实例我们使用了内置函数 len() 和 range(),函数 len() '
             '返回列表的长度，即元素的个数。range返回一个序列的数。',
             '在 python 中，for … else 表示这样的意思，for 中的语句和普通的没有区别，else '
             '中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行，while … else 也是一样。',
             '以上实例输出结果：',
             '更多实例：'],
 'href': 'https://www.runoob.com/python/python-for-loop.html',
 'image': [],
 'title': 'Python for 循环语句'}{'content': ['Python 编程中 while '
             '语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。其基本形式为：',
             '执行语句可以是单个语句或语句块。判断条件可以是任何表达式，任何非零、或非空（null）的值均为true。',
             '当判断条件假 false 时，循环结束。',
             '执行流程图如下：',
             '复杂一点:',
             '',
             '以上代码执行输出结果:',
             'while 语句时还有另外两个重要的命令 continue，break 来跳过循环，continue '
             '用于跳过该次循环，break 则是用于退出循环，此外"判断条件"还可以是个常值，表示循环必定成立，具体用法如下：',
             '如果条件判断语句永远为 true，循环将会无限的执行下去，如下实例：',
             '',
             '以上实例输出结果：',
             '以上的无限循环你可以使用  CTRL+C 来中断循环。',
             '在 python 中，while … else 在循环条件为 false 时执行 else 语句块：',
             '以上实例输出结果为：',
             '类似 if 语句的语法，如果你的 while 循环体中只有一条语句，你可以将该语句与while写在同一行中，如下所示：',
             '以上的无限循环你可以使用  ',
             ' 来中断循环。'],
 'href': 'https://www.runoob.com/python/python-while-loop.html',
 'image': [],
 'title': 'Python While 循环语句'}{'content': ['本章节将向大家介绍Python的循环语句，程序在一般情况下是按顺序执行的。',
             '编程语言提供了各种控制结构，允许更复杂的执行路径。',
             '循环语句允许我们执行一个语句或语句组多次，下面是在大多数编程语言中的循环语句的一般形式：',
             'Python 提供了 for 循环和 while 循环（在 Python 中没有 do..while 循环）:',
             '循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：'],
 'href': 'https://www.runoob.com/python/python-loops.html',
 'image': [],
 'title': 'Python 循环语句'}